package com.bll.lnkstudy.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bll.lnkstudy.mvp.model.Book;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK".
*/
public class BookDao extends AbstractDao<Book, Long> {

    public static final String TABLENAME = "BOOK";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AssetUrl = new Property(1, String.class, "assetUrl", false, "ASSET_URL");
        public final static Property DownloadUrl = new Property(2, String.class, "downloadUrl", false, "DOWNLOAD_URL");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Price = new Property(5, int.class, "price", false, "PRICE");
        public final static Property Status = new Property(6, int.class, "status", false, "STATUS");
        public final static Property BookPath = new Property(7, String.class, "bookPath", false, "BOOK_PATH");
        public final static Property LoadState = new Property(8, int.class, "loadState", false, "LOAD_STATE");
        public final static Property Type = new Property(9, String.class, "type", false, "TYPE");
        public final static Property ClassX = new Property(10, String.class, "classX", false, "CLASS_X");
        public final static Property Grade = new Property(11, String.class, "grade", false, "GRADE");
        public final static Property Version = new Property(12, String.class, "version", false, "VERSION");
        public final static Property Time = new Property(13, Long.class, "time", false, "TIME");
        public final static Property PageIndex = new Property(14, int.class, "pageIndex", false, "PAGE_INDEX");
        public final static Property PageUrl = new Property(15, String.class, "pageUrl", false, "PAGE_URL");
        public final static Property IsCollect = new Property(16, boolean.class, "isCollect", false, "IS_COLLECT");
        public final static Property BookType = new Property(17, int.class, "bookType", false, "BOOK_TYPE");
    }


    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY UNIQUE ," + // 0: id
                "\"ASSET_URL\" TEXT," + // 1: assetUrl
                "\"DOWNLOAD_URL\" TEXT," + // 2: downloadUrl
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"NAME\" TEXT," + // 4: name
                "\"PRICE\" INTEGER NOT NULL ," + // 5: price
                "\"STATUS\" INTEGER NOT NULL ," + // 6: status
                "\"BOOK_PATH\" TEXT," + // 7: bookPath
                "\"LOAD_STATE\" INTEGER NOT NULL ," + // 8: loadState
                "\"TYPE\" TEXT," + // 9: type
                "\"CLASS_X\" TEXT," + // 10: classX
                "\"GRADE\" TEXT," + // 11: grade
                "\"VERSION\" TEXT," + // 12: version
                "\"TIME\" INTEGER," + // 13: time
                "\"PAGE_INDEX\" INTEGER NOT NULL ," + // 14: pageIndex
                "\"PAGE_URL\" TEXT," + // 15: pageUrl
                "\"IS_COLLECT\" INTEGER NOT NULL ," + // 16: isCollect
                "\"BOOK_TYPE\" INTEGER NOT NULL );"); // 17: bookType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Book entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String assetUrl = entity.getAssetUrl();
        if (assetUrl != null) {
            stmt.bindString(2, assetUrl);
        }
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(3, downloadUrl);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
        stmt.bindLong(6, entity.getPrice());
        stmt.bindLong(7, entity.getStatus());
 
        String bookPath = entity.getBookPath();
        if (bookPath != null) {
            stmt.bindString(8, bookPath);
        }
        stmt.bindLong(9, entity.getLoadState());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(10, type);
        }
 
        String classX = entity.getClassX();
        if (classX != null) {
            stmt.bindString(11, classX);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(12, grade);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(13, version);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(14, time);
        }
        stmt.bindLong(15, entity.getPageIndex());
 
        String pageUrl = entity.getPageUrl();
        if (pageUrl != null) {
            stmt.bindString(16, pageUrl);
        }
        stmt.bindLong(17, entity.getIsCollect() ? 1L: 0L);
        stmt.bindLong(18, entity.getBookType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String assetUrl = entity.getAssetUrl();
        if (assetUrl != null) {
            stmt.bindString(2, assetUrl);
        }
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(3, downloadUrl);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
        stmt.bindLong(6, entity.getPrice());
        stmt.bindLong(7, entity.getStatus());
 
        String bookPath = entity.getBookPath();
        if (bookPath != null) {
            stmt.bindString(8, bookPath);
        }
        stmt.bindLong(9, entity.getLoadState());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(10, type);
        }
 
        String classX = entity.getClassX();
        if (classX != null) {
            stmt.bindString(11, classX);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(12, grade);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(13, version);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(14, time);
        }
        stmt.bindLong(15, entity.getPageIndex());
 
        String pageUrl = entity.getPageUrl();
        if (pageUrl != null) {
            stmt.bindString(16, pageUrl);
        }
        stmt.bindLong(17, entity.getIsCollect() ? 1L: 0L);
        stmt.bindLong(18, entity.getBookType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // assetUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // downloadUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.getInt(offset + 5), // price
            cursor.getInt(offset + 6), // status
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // bookPath
            cursor.getInt(offset + 8), // loadState
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // type
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // classX
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // grade
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // version
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13), // time
            cursor.getInt(offset + 14), // pageIndex
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // pageUrl
            cursor.getShort(offset + 16) != 0, // isCollect
            cursor.getInt(offset + 17) // bookType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAssetUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDownloadUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPrice(cursor.getInt(offset + 5));
        entity.setStatus(cursor.getInt(offset + 6));
        entity.setBookPath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLoadState(cursor.getInt(offset + 8));
        entity.setType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setClassX(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setGrade(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setVersion(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTime(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setPageIndex(cursor.getInt(offset + 14));
        entity.setPageUrl(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setIsCollect(cursor.getShort(offset + 16) != 0);
        entity.setBookType(cursor.getInt(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Book entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Book entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Book entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
