package com.bll.lnkstudy.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bll.lnkstudy.utils.greendao.StringConverter;
import java.util.List;

import com.bll.lnkstudy.mvp.model.homework.HomeworkShareBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOMEWORK_SHARE_BEAN".
*/
public class HomeworkShareBeanDao extends AbstractDao<HomeworkShareBean, Long> {

    public static final String TABLENAME = "HOMEWORK_SHARE_BEAN";

    /**
     * Properties of entity HomeworkShareBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StudentId = new Property(1, long.class, "studentId", false, "STUDENT_ID");
        public final static Property TypeId = new Property(2, int.class, "typeId", false, "TYPE_ID");
        public final static Property Type = new Property(3, int.class, "type", false, "TYPE");
        public final static Property Subject = new Property(4, int.class, "subject", false, "SUBJECT");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property CommonName = new Property(6, String.class, "commonName", false, "COMMON_NAME");
        public final static Property Title = new Property(7, String.class, "title", false, "TITLE");
        public final static Property SubType = new Property(8, int.class, "subType", false, "SUB_TYPE");
        public final static Property Date = new Property(9, long.class, "date", false, "DATE");
        public final static Property FilePath = new Property(10, String.class, "filePath", false, "FILE_PATH");
        public final static Property Paths = new Property(11, String.class, "paths", false, "PATHS");
        public final static Property DrawPaths = new Property(12, String.class, "drawPaths", false, "DRAW_PATHS");
        public final static Property Score = new Property(13, double.class, "score", false, "SCORE");
        public final static Property Question = new Property(14, String.class, "question", false, "QUESTION");
        public final static Property QuestionType = new Property(15, int.class, "questionType", false, "QUESTION_TYPE");
        public final static Property QuestionMode = new Property(16, int.class, "questionMode", false, "QUESTION_MODE");
        public final static Property AnswerUrl = new Property(17, String.class, "answerUrl", false, "ANSWER_URL");
        public final static Property Grade = new Property(18, int.class, "grade", false, "GRADE");
        public final static Property ExamUrl = new Property(19, String.class, "examUrl", false, "EXAM_URL");
    }

    private final StringConverter pathsConverter = new StringConverter();
    private final StringConverter drawPathsConverter = new StringConverter();

    public HomeworkShareBeanDao(DaoConfig config) {
        super(config);
    }
    
    public HomeworkShareBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOMEWORK_SHARE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"STUDENT_ID\" INTEGER NOT NULL ," + // 1: studentId
                "\"TYPE_ID\" INTEGER NOT NULL ," + // 2: typeId
                "\"TYPE\" INTEGER NOT NULL ," + // 3: type
                "\"SUBJECT\" INTEGER NOT NULL ," + // 4: subject
                "\"NAME\" TEXT," + // 5: name
                "\"COMMON_NAME\" TEXT," + // 6: commonName
                "\"TITLE\" TEXT," + // 7: title
                "\"SUB_TYPE\" INTEGER NOT NULL ," + // 8: subType
                "\"DATE\" INTEGER NOT NULL ," + // 9: date
                "\"FILE_PATH\" TEXT," + // 10: filePath
                "\"PATHS\" TEXT," + // 11: paths
                "\"DRAW_PATHS\" TEXT," + // 12: drawPaths
                "\"SCORE\" REAL NOT NULL ," + // 13: score
                "\"QUESTION\" TEXT," + // 14: question
                "\"QUESTION_TYPE\" INTEGER NOT NULL ," + // 15: questionType
                "\"QUESTION_MODE\" INTEGER NOT NULL ," + // 16: questionMode
                "\"ANSWER_URL\" TEXT," + // 17: answerUrl
                "\"GRADE\" INTEGER NOT NULL ," + // 18: grade
                "\"EXAM_URL\" TEXT);"); // 19: examUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOMEWORK_SHARE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HomeworkShareBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStudentId());
        stmt.bindLong(3, entity.getTypeId());
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getSubject());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String commonName = entity.getCommonName();
        if (commonName != null) {
            stmt.bindString(7, commonName);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
        stmt.bindLong(9, entity.getSubType());
        stmt.bindLong(10, entity.getDate());
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(11, filePath);
        }
 
        List paths = entity.getPaths();
        if (paths != null) {
            stmt.bindString(12, pathsConverter.convertToDatabaseValue(paths));
        }
 
        List drawPaths = entity.getDrawPaths();
        if (drawPaths != null) {
            stmt.bindString(13, drawPathsConverter.convertToDatabaseValue(drawPaths));
        }
        stmt.bindDouble(14, entity.getScore());
 
        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(15, question);
        }
        stmt.bindLong(16, entity.getQuestionType());
        stmt.bindLong(17, entity.getQuestionMode());
 
        String answerUrl = entity.getAnswerUrl();
        if (answerUrl != null) {
            stmt.bindString(18, answerUrl);
        }
        stmt.bindLong(19, entity.getGrade());
 
        String examUrl = entity.getExamUrl();
        if (examUrl != null) {
            stmt.bindString(20, examUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HomeworkShareBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStudentId());
        stmt.bindLong(3, entity.getTypeId());
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getSubject());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String commonName = entity.getCommonName();
        if (commonName != null) {
            stmt.bindString(7, commonName);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
        stmt.bindLong(9, entity.getSubType());
        stmt.bindLong(10, entity.getDate());
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(11, filePath);
        }
 
        List paths = entity.getPaths();
        if (paths != null) {
            stmt.bindString(12, pathsConverter.convertToDatabaseValue(paths));
        }
 
        List drawPaths = entity.getDrawPaths();
        if (drawPaths != null) {
            stmt.bindString(13, drawPathsConverter.convertToDatabaseValue(drawPaths));
        }
        stmt.bindDouble(14, entity.getScore());
 
        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(15, question);
        }
        stmt.bindLong(16, entity.getQuestionType());
        stmt.bindLong(17, entity.getQuestionMode());
 
        String answerUrl = entity.getAnswerUrl();
        if (answerUrl != null) {
            stmt.bindString(18, answerUrl);
        }
        stmt.bindLong(19, entity.getGrade());
 
        String examUrl = entity.getExamUrl();
        if (examUrl != null) {
            stmt.bindString(20, examUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HomeworkShareBean readEntity(Cursor cursor, int offset) {
        HomeworkShareBean entity = new HomeworkShareBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // studentId
            cursor.getInt(offset + 2), // typeId
            cursor.getInt(offset + 3), // type
            cursor.getInt(offset + 4), // subject
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // commonName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // title
            cursor.getInt(offset + 8), // subType
            cursor.getLong(offset + 9), // date
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // filePath
            cursor.isNull(offset + 11) ? null : pathsConverter.convertToEntityProperty(cursor.getString(offset + 11)), // paths
            cursor.isNull(offset + 12) ? null : drawPathsConverter.convertToEntityProperty(cursor.getString(offset + 12)), // drawPaths
            cursor.getDouble(offset + 13), // score
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // question
            cursor.getInt(offset + 15), // questionType
            cursor.getInt(offset + 16), // questionMode
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // answerUrl
            cursor.getInt(offset + 18), // grade
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // examUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HomeworkShareBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStudentId(cursor.getLong(offset + 1));
        entity.setTypeId(cursor.getInt(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setSubject(cursor.getInt(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCommonName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTitle(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSubType(cursor.getInt(offset + 8));
        entity.setDate(cursor.getLong(offset + 9));
        entity.setFilePath(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPaths(cursor.isNull(offset + 11) ? null : pathsConverter.convertToEntityProperty(cursor.getString(offset + 11)));
        entity.setDrawPaths(cursor.isNull(offset + 12) ? null : drawPathsConverter.convertToEntityProperty(cursor.getString(offset + 12)));
        entity.setScore(cursor.getDouble(offset + 13));
        entity.setQuestion(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setQuestionType(cursor.getInt(offset + 15));
        entity.setQuestionMode(cursor.getInt(offset + 16));
        entity.setAnswerUrl(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setGrade(cursor.getInt(offset + 18));
        entity.setExamUrl(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HomeworkShareBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HomeworkShareBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HomeworkShareBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
