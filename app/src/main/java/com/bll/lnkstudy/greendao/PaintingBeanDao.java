package com.bll.lnkstudy.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bll.lnkstudy.utils.greendao.StringConverter;
import java.util.List;

import com.bll.lnkstudy.mvp.model.PaintingBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PAINTING_BEAN".
*/
public class PaintingBeanDao extends AbstractDao<PaintingBean, Long> {

    public static final String TABLENAME = "PAINTING_BEAN";

    /**
     * Properties of entity PaintingBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property ContentId = new Property(2, int.class, "contentId", false, "CONTENT_ID");
        public final static Property Type = new Property(3, int.class, "type", false, "TYPE");
        public final static Property Time = new Property(4, int.class, "time", false, "TIME");
        public final static Property TimeStr = new Property(5, String.class, "timeStr", false, "TIME_STR");
        public final static Property PaintingType = new Property(6, int.class, "paintingType", false, "PAINTING_TYPE");
        public final static Property PaintingTypeStr = new Property(7, String.class, "paintingTypeStr", false, "PAINTING_TYPE_STR");
        public final static Property Title = new Property(8, String.class, "title", false, "TITLE");
        public final static Property Info = new Property(9, String.class, "info", false, "INFO");
        public final static Property Price = new Property(10, int.class, "price", false, "PRICE");
        public final static Property ImageUrl = new Property(11, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property BodyUrl = new Property(12, String.class, "bodyUrl", false, "BODY_URL");
        public final static Property Supply = new Property(13, int.class, "supply", false, "SUPPLY");
        public final static Property Paths = new Property(14, String.class, "paths", false, "PATHS");
        public final static Property Date = new Property(15, long.class, "date", false, "DATE");
    }

    private final StringConverter pathsConverter = new StringConverter();

    public PaintingBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PaintingBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PAINTING_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"CONTENT_ID\" INTEGER NOT NULL ," + // 2: contentId
                "\"TYPE\" INTEGER NOT NULL ," + // 3: type
                "\"TIME\" INTEGER NOT NULL ," + // 4: time
                "\"TIME_STR\" TEXT," + // 5: timeStr
                "\"PAINTING_TYPE\" INTEGER NOT NULL ," + // 6: paintingType
                "\"PAINTING_TYPE_STR\" TEXT," + // 7: paintingTypeStr
                "\"TITLE\" TEXT," + // 8: title
                "\"INFO\" TEXT," + // 9: info
                "\"PRICE\" INTEGER NOT NULL ," + // 10: price
                "\"IMAGE_URL\" TEXT," + // 11: imageUrl
                "\"BODY_URL\" TEXT," + // 12: bodyUrl
                "\"SUPPLY\" INTEGER NOT NULL ," + // 13: supply
                "\"PATHS\" TEXT," + // 14: paths
                "\"DATE\" INTEGER NOT NULL );"); // 15: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PAINTING_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PaintingBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getContentId());
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getTime());
 
        String timeStr = entity.getTimeStr();
        if (timeStr != null) {
            stmt.bindString(6, timeStr);
        }
        stmt.bindLong(7, entity.getPaintingType());
 
        String paintingTypeStr = entity.getPaintingTypeStr();
        if (paintingTypeStr != null) {
            stmt.bindString(8, paintingTypeStr);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(9, title);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(10, info);
        }
        stmt.bindLong(11, entity.getPrice());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(12, imageUrl);
        }
 
        String bodyUrl = entity.getBodyUrl();
        if (bodyUrl != null) {
            stmt.bindString(13, bodyUrl);
        }
        stmt.bindLong(14, entity.getSupply());
 
        List paths = entity.getPaths();
        if (paths != null) {
            stmt.bindString(15, pathsConverter.convertToDatabaseValue(paths));
        }
        stmt.bindLong(16, entity.getDate());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PaintingBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getContentId());
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getTime());
 
        String timeStr = entity.getTimeStr();
        if (timeStr != null) {
            stmt.bindString(6, timeStr);
        }
        stmt.bindLong(7, entity.getPaintingType());
 
        String paintingTypeStr = entity.getPaintingTypeStr();
        if (paintingTypeStr != null) {
            stmt.bindString(8, paintingTypeStr);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(9, title);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(10, info);
        }
        stmt.bindLong(11, entity.getPrice());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(12, imageUrl);
        }
 
        String bodyUrl = entity.getBodyUrl();
        if (bodyUrl != null) {
            stmt.bindString(13, bodyUrl);
        }
        stmt.bindLong(14, entity.getSupply());
 
        List paths = entity.getPaths();
        if (paths != null) {
            stmt.bindString(15, pathsConverter.convertToDatabaseValue(paths));
        }
        stmt.bindLong(16, entity.getDate());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PaintingBean readEntity(Cursor cursor, int offset) {
        PaintingBean entity = new PaintingBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.getInt(offset + 2), // contentId
            cursor.getInt(offset + 3), // type
            cursor.getInt(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // timeStr
            cursor.getInt(offset + 6), // paintingType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // paintingTypeStr
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // title
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // info
            cursor.getInt(offset + 10), // price
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // imageUrl
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // bodyUrl
            cursor.getInt(offset + 13), // supply
            cursor.isNull(offset + 14) ? null : pathsConverter.convertToEntityProperty(cursor.getString(offset + 14)), // paths
            cursor.getLong(offset + 15) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PaintingBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setContentId(cursor.getInt(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setTime(cursor.getInt(offset + 4));
        entity.setTimeStr(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPaintingType(cursor.getInt(offset + 6));
        entity.setPaintingTypeStr(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTitle(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setInfo(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPrice(cursor.getInt(offset + 10));
        entity.setImageUrl(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBodyUrl(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSupply(cursor.getInt(offset + 13));
        entity.setPaths(cursor.isNull(offset + 14) ? null : pathsConverter.convertToEntityProperty(cursor.getString(offset + 14)));
        entity.setDate(cursor.getLong(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PaintingBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PaintingBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PaintingBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
