package com.bll.lnkstudy.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bll.lnkstudy.mvp.model.homework.HomeworkTypeBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOMEWORK_TYPE_BEAN".
*/
public class HomeworkTypeBeanDao extends AbstractDao<HomeworkTypeBean, Long> {

    public static final String TABLENAME = "HOMEWORK_TYPE_BEAN";

    /**
     * Properties of entity HomeworkTypeBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StudentId = new Property(1, long.class, "studentId", false, "STUDENT_ID");
        public final static Property UserId = new Property(2, long.class, "userId", false, "USER_ID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property TypeId = new Property(4, int.class, "typeId", false, "TYPE_ID");
        public final static Property State = new Property(5, int.class, "state", false, "STATE");
        public final static Property Date = new Property(6, long.class, "date", false, "DATE");
        public final static Property ContentResId = new Property(7, String.class, "contentResId", false, "CONTENT_RES_ID");
        public final static Property BgResId = new Property(8, String.class, "bgResId", false, "BG_RES_ID");
        public final static Property Course = new Property(9, String.class, "course", false, "COURSE");
        public final static Property IsCreate = new Property(10, boolean.class, "isCreate", false, "IS_CREATE");
        public final static Property MessageTotal = new Property(11, int.class, "messageTotal", false, "MESSAGE_TOTAL");
    }


    public HomeworkTypeBeanDao(DaoConfig config) {
        super(config);
    }
    
    public HomeworkTypeBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOMEWORK_TYPE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"STUDENT_ID\" INTEGER NOT NULL ," + // 1: studentId
                "\"USER_ID\" INTEGER NOT NULL ," + // 2: userId
                "\"NAME\" TEXT," + // 3: name
                "\"TYPE_ID\" INTEGER NOT NULL UNIQUE ," + // 4: typeId
                "\"STATE\" INTEGER NOT NULL ," + // 5: state
                "\"DATE\" INTEGER NOT NULL ," + // 6: date
                "\"CONTENT_RES_ID\" TEXT," + // 7: contentResId
                "\"BG_RES_ID\" TEXT," + // 8: bgResId
                "\"COURSE\" TEXT," + // 9: course
                "\"IS_CREATE\" INTEGER NOT NULL ," + // 10: isCreate
                "\"MESSAGE_TOTAL\" INTEGER NOT NULL );"); // 11: messageTotal
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOMEWORK_TYPE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HomeworkTypeBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStudentId());
        stmt.bindLong(3, entity.getUserId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindLong(5, entity.getTypeId());
        stmt.bindLong(6, entity.getState());
        stmt.bindLong(7, entity.getDate());
 
        String contentResId = entity.getContentResId();
        if (contentResId != null) {
            stmt.bindString(8, contentResId);
        }
 
        String bgResId = entity.getBgResId();
        if (bgResId != null) {
            stmt.bindString(9, bgResId);
        }
 
        String course = entity.getCourse();
        if (course != null) {
            stmt.bindString(10, course);
        }
        stmt.bindLong(11, entity.getIsCreate() ? 1L: 0L);
        stmt.bindLong(12, entity.getMessageTotal());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HomeworkTypeBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStudentId());
        stmt.bindLong(3, entity.getUserId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindLong(5, entity.getTypeId());
        stmt.bindLong(6, entity.getState());
        stmt.bindLong(7, entity.getDate());
 
        String contentResId = entity.getContentResId();
        if (contentResId != null) {
            stmt.bindString(8, contentResId);
        }
 
        String bgResId = entity.getBgResId();
        if (bgResId != null) {
            stmt.bindString(9, bgResId);
        }
 
        String course = entity.getCourse();
        if (course != null) {
            stmt.bindString(10, course);
        }
        stmt.bindLong(11, entity.getIsCreate() ? 1L: 0L);
        stmt.bindLong(12, entity.getMessageTotal());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HomeworkTypeBean readEntity(Cursor cursor, int offset) {
        HomeworkTypeBean entity = new HomeworkTypeBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // studentId
            cursor.getLong(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.getInt(offset + 4), // typeId
            cursor.getInt(offset + 5), // state
            cursor.getLong(offset + 6), // date
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // contentResId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // bgResId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // course
            cursor.getShort(offset + 10) != 0, // isCreate
            cursor.getInt(offset + 11) // messageTotal
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HomeworkTypeBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStudentId(cursor.getLong(offset + 1));
        entity.setUserId(cursor.getLong(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTypeId(cursor.getInt(offset + 4));
        entity.setState(cursor.getInt(offset + 5));
        entity.setDate(cursor.getLong(offset + 6));
        entity.setContentResId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBgResId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCourse(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsCreate(cursor.getShort(offset + 10) != 0);
        entity.setMessageTotal(cursor.getInt(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HomeworkTypeBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HomeworkTypeBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HomeworkTypeBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
