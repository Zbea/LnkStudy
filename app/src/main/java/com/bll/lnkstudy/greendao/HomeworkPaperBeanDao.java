package com.bll.lnkstudy.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bll.lnkstudy.mvp.model.homework.HomeworkPaperBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOMEWORK_PAPER_BEAN".
*/
public class HomeworkPaperBeanDao extends AbstractDao<HomeworkPaperBean, Long> {

    public static final String TABLENAME = "HOMEWORK_PAPER_BEAN";

    /**
     * Properties of entity HomeworkPaperBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property ContentId = new Property(2, int.class, "contentId", false, "CONTENT_ID");
        public final static Property Course = new Property(3, String.class, "course", false, "COURSE");
        public final static Property TypeId = new Property(4, int.class, "typeId", false, "TYPE_ID");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property Index = new Property(6, int.class, "index", false, "INDEX");
        public final static Property Title = new Property(7, String.class, "title", false, "TITLE");
        public final static Property EndTime = new Property(8, long.class, "endTime", false, "END_TIME");
        public final static Property Path = new Property(9, String.class, "path", false, "PATH");
        public final static Property Page = new Property(10, int.class, "page", false, "PAGE");
        public final static Property IsPg = new Property(11, boolean.class, "isPg", false, "IS_PG");
        public final static Property IsCommit = new Property(12, boolean.class, "isCommit", false, "IS_COMMIT");
        public final static Property State = new Property(13, int.class, "state", false, "STATE");
        public final static Property CorrectMode = new Property(14, int.class, "correctMode", false, "CORRECT_MODE");
        public final static Property Score = new Property(15, String.class, "score", false, "SCORE");
        public final static Property CorrectJson = new Property(16, String.class, "correctJson", false, "CORRECT_JSON");
    }


    public HomeworkPaperBeanDao(DaoConfig config) {
        super(config);
    }
    
    public HomeworkPaperBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOMEWORK_PAPER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"CONTENT_ID\" INTEGER NOT NULL UNIQUE ," + // 2: contentId
                "\"COURSE\" TEXT," + // 3: course
                "\"TYPE_ID\" INTEGER NOT NULL ," + // 4: typeId
                "\"TYPE\" TEXT," + // 5: type
                "\"INDEX\" INTEGER NOT NULL ," + // 6: index
                "\"TITLE\" TEXT," + // 7: title
                "\"END_TIME\" INTEGER NOT NULL ," + // 8: endTime
                "\"PATH\" TEXT," + // 9: path
                "\"PAGE\" INTEGER NOT NULL ," + // 10: page
                "\"IS_PG\" INTEGER NOT NULL ," + // 11: isPg
                "\"IS_COMMIT\" INTEGER NOT NULL ," + // 12: isCommit
                "\"STATE\" INTEGER NOT NULL ," + // 13: state
                "\"CORRECT_MODE\" INTEGER NOT NULL ," + // 14: correctMode
                "\"SCORE\" TEXT," + // 15: score
                "\"CORRECT_JSON\" TEXT);"); // 16: correctJson
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOMEWORK_PAPER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HomeworkPaperBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getContentId());
 
        String course = entity.getCourse();
        if (course != null) {
            stmt.bindString(4, course);
        }
        stmt.bindLong(5, entity.getTypeId());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
        stmt.bindLong(7, entity.getIndex());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
        stmt.bindLong(9, entity.getEndTime());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(10, path);
        }
        stmt.bindLong(11, entity.getPage());
        stmt.bindLong(12, entity.getIsPg() ? 1L: 0L);
        stmt.bindLong(13, entity.getIsCommit() ? 1L: 0L);
        stmt.bindLong(14, entity.getState());
        stmt.bindLong(15, entity.getCorrectMode());
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(16, score);
        }
 
        String correctJson = entity.getCorrectJson();
        if (correctJson != null) {
            stmt.bindString(17, correctJson);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HomeworkPaperBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getContentId());
 
        String course = entity.getCourse();
        if (course != null) {
            stmt.bindString(4, course);
        }
        stmt.bindLong(5, entity.getTypeId());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
        stmt.bindLong(7, entity.getIndex());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
        stmt.bindLong(9, entity.getEndTime());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(10, path);
        }
        stmt.bindLong(11, entity.getPage());
        stmt.bindLong(12, entity.getIsPg() ? 1L: 0L);
        stmt.bindLong(13, entity.getIsCommit() ? 1L: 0L);
        stmt.bindLong(14, entity.getState());
        stmt.bindLong(15, entity.getCorrectMode());
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(16, score);
        }
 
        String correctJson = entity.getCorrectJson();
        if (correctJson != null) {
            stmt.bindString(17, correctJson);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HomeworkPaperBean readEntity(Cursor cursor, int offset) {
        HomeworkPaperBean entity = new HomeworkPaperBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.getInt(offset + 2), // contentId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // course
            cursor.getInt(offset + 4), // typeId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // type
            cursor.getInt(offset + 6), // index
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // title
            cursor.getLong(offset + 8), // endTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // path
            cursor.getInt(offset + 10), // page
            cursor.getShort(offset + 11) != 0, // isPg
            cursor.getShort(offset + 12) != 0, // isCommit
            cursor.getInt(offset + 13), // state
            cursor.getInt(offset + 14), // correctMode
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // score
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // correctJson
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HomeworkPaperBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setContentId(cursor.getInt(offset + 2));
        entity.setCourse(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTypeId(cursor.getInt(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIndex(cursor.getInt(offset + 6));
        entity.setTitle(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEndTime(cursor.getLong(offset + 8));
        entity.setPath(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPage(cursor.getInt(offset + 10));
        entity.setIsPg(cursor.getShort(offset + 11) != 0);
        entity.setIsCommit(cursor.getShort(offset + 12) != 0);
        entity.setState(cursor.getInt(offset + 13));
        entity.setCorrectMode(cursor.getInt(offset + 14));
        entity.setScore(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCorrectJson(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HomeworkPaperBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HomeworkPaperBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HomeworkPaperBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
