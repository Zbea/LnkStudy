package com.bll.lnkstudy.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bll.lnkstudy.mvp.model.homework.HomeworkBookCorrectBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOMEWORK_BOOK_CORRECT_BEAN".
*/
public class HomeworkBookCorrectBeanDao extends AbstractDao<HomeworkBookCorrectBean, Long> {

    public static final String TABLENAME = "HOMEWORK_BOOK_CORRECT_BEAN";

    /**
     * Properties of entity HomeworkBookCorrectBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property BookId = new Property(2, int.class, "bookId", false, "BOOK_ID");
        public final static Property ContendId = new Property(3, int.class, "contendId", false, "CONTEND_ID");
        public final static Property HomeworkTitle = new Property(4, String.class, "homeworkTitle", false, "HOMEWORK_TITLE");
        public final static Property Page = new Property(5, int.class, "page", false, "PAGE");
        public final static Property State = new Property(6, int.class, "state", false, "STATE");
        public final static Property CorrectMode = new Property(7, int.class, "correctMode", false, "CORRECT_MODE");
        public final static Property ScoreMode = new Property(8, int.class, "scoreMode", false, "SCORE_MODE");
        public final static Property Score = new Property(9, double.class, "score", false, "SCORE");
        public final static Property AnswerUrl = new Property(10, String.class, "answerUrl", false, "ANSWER_URL");
        public final static Property CorrectJson = new Property(11, String.class, "correctJson", false, "CORRECT_JSON");
        public final static Property IsSelfCorrect = new Property(12, boolean.class, "isSelfCorrect", false, "IS_SELF_CORRECT");
        public final static Property CommitJson = new Property(13, String.class, "commitJson", false, "COMMIT_JSON");
        public final static Property StartTime = new Property(14, Long.class, "startTime", false, "START_TIME");
    }


    public HomeworkBookCorrectBeanDao(DaoConfig config) {
        super(config);
    }
    
    public HomeworkBookCorrectBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOMEWORK_BOOK_CORRECT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"BOOK_ID\" INTEGER NOT NULL ," + // 2: bookId
                "\"CONTEND_ID\" INTEGER NOT NULL ," + // 3: contendId
                "\"HOMEWORK_TITLE\" TEXT," + // 4: homeworkTitle
                "\"PAGE\" INTEGER NOT NULL ," + // 5: page
                "\"STATE\" INTEGER NOT NULL ," + // 6: state
                "\"CORRECT_MODE\" INTEGER NOT NULL ," + // 7: correctMode
                "\"SCORE_MODE\" INTEGER NOT NULL ," + // 8: scoreMode
                "\"SCORE\" REAL NOT NULL ," + // 9: score
                "\"ANSWER_URL\" TEXT," + // 10: answerUrl
                "\"CORRECT_JSON\" TEXT," + // 11: correctJson
                "\"IS_SELF_CORRECT\" INTEGER NOT NULL ," + // 12: isSelfCorrect
                "\"COMMIT_JSON\" TEXT," + // 13: commitJson
                "\"START_TIME\" INTEGER);"); // 14: startTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOMEWORK_BOOK_CORRECT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HomeworkBookCorrectBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getBookId());
        stmt.bindLong(4, entity.getContendId());
 
        String homeworkTitle = entity.getHomeworkTitle();
        if (homeworkTitle != null) {
            stmt.bindString(5, homeworkTitle);
        }
        stmt.bindLong(6, entity.getPage());
        stmt.bindLong(7, entity.getState());
        stmt.bindLong(8, entity.getCorrectMode());
        stmt.bindLong(9, entity.getScoreMode());
        stmt.bindDouble(10, entity.getScore());
 
        String answerUrl = entity.getAnswerUrl();
        if (answerUrl != null) {
            stmt.bindString(11, answerUrl);
        }
 
        String correctJson = entity.getCorrectJson();
        if (correctJson != null) {
            stmt.bindString(12, correctJson);
        }
        stmt.bindLong(13, entity.getIsSelfCorrect() ? 1L: 0L);
 
        String commitJson = entity.getCommitJson();
        if (commitJson != null) {
            stmt.bindString(14, commitJson);
        }
 
        Long startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(15, startTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HomeworkBookCorrectBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getBookId());
        stmt.bindLong(4, entity.getContendId());
 
        String homeworkTitle = entity.getHomeworkTitle();
        if (homeworkTitle != null) {
            stmt.bindString(5, homeworkTitle);
        }
        stmt.bindLong(6, entity.getPage());
        stmt.bindLong(7, entity.getState());
        stmt.bindLong(8, entity.getCorrectMode());
        stmt.bindLong(9, entity.getScoreMode());
        stmt.bindDouble(10, entity.getScore());
 
        String answerUrl = entity.getAnswerUrl();
        if (answerUrl != null) {
            stmt.bindString(11, answerUrl);
        }
 
        String correctJson = entity.getCorrectJson();
        if (correctJson != null) {
            stmt.bindString(12, correctJson);
        }
        stmt.bindLong(13, entity.getIsSelfCorrect() ? 1L: 0L);
 
        String commitJson = entity.getCommitJson();
        if (commitJson != null) {
            stmt.bindString(14, commitJson);
        }
 
        Long startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(15, startTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HomeworkBookCorrectBean readEntity(Cursor cursor, int offset) {
        HomeworkBookCorrectBean entity = new HomeworkBookCorrectBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.getInt(offset + 2), // bookId
            cursor.getInt(offset + 3), // contendId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // homeworkTitle
            cursor.getInt(offset + 5), // page
            cursor.getInt(offset + 6), // state
            cursor.getInt(offset + 7), // correctMode
            cursor.getInt(offset + 8), // scoreMode
            cursor.getDouble(offset + 9), // score
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // answerUrl
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // correctJson
            cursor.getShort(offset + 12) != 0, // isSelfCorrect
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // commitJson
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14) // startTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HomeworkBookCorrectBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setBookId(cursor.getInt(offset + 2));
        entity.setContendId(cursor.getInt(offset + 3));
        entity.setHomeworkTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPage(cursor.getInt(offset + 5));
        entity.setState(cursor.getInt(offset + 6));
        entity.setCorrectMode(cursor.getInt(offset + 7));
        entity.setScoreMode(cursor.getInt(offset + 8));
        entity.setScore(cursor.getDouble(offset + 9));
        entity.setAnswerUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCorrectJson(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsSelfCorrect(cursor.getShort(offset + 12) != 0);
        entity.setCommitJson(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setStartTime(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HomeworkBookCorrectBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HomeworkBookCorrectBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HomeworkBookCorrectBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
