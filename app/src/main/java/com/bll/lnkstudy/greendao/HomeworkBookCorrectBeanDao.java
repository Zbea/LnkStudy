package com.bll.lnkstudy.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bll.lnkstudy.mvp.model.homework.HomeworkBookCorrectBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOMEWORK_BOOK_CORRECT_BEAN".
*/
public class HomeworkBookCorrectBeanDao extends AbstractDao<HomeworkBookCorrectBean, Long> {

    public static final String TABLENAME = "HOMEWORK_BOOK_CORRECT_BEAN";

    /**
     * Properties of entity HomeworkBookCorrectBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property BookId = new Property(2, int.class, "bookId", false, "BOOK_ID");
        public final static Property HomeworkTitle = new Property(3, String.class, "homeworkTitle", false, "HOMEWORK_TITLE");
        public final static Property Pages = new Property(4, String.class, "pages", false, "PAGES");
        public final static Property CorrectMode = new Property(5, int.class, "correctMode", false, "CORRECT_MODE");
        public final static Property Score = new Property(6, String.class, "score", false, "SCORE");
        public final static Property CorrectJson = new Property(7, String.class, "correctJson", false, "CORRECT_JSON");
    }


    public HomeworkBookCorrectBeanDao(DaoConfig config) {
        super(config);
    }
    
    public HomeworkBookCorrectBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOMEWORK_BOOK_CORRECT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"BOOK_ID\" INTEGER NOT NULL ," + // 2: bookId
                "\"HOMEWORK_TITLE\" TEXT," + // 3: homeworkTitle
                "\"PAGES\" TEXT," + // 4: pages
                "\"CORRECT_MODE\" INTEGER NOT NULL ," + // 5: correctMode
                "\"SCORE\" TEXT," + // 6: score
                "\"CORRECT_JSON\" TEXT);"); // 7: correctJson
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOMEWORK_BOOK_CORRECT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HomeworkBookCorrectBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getBookId());
 
        String homeworkTitle = entity.getHomeworkTitle();
        if (homeworkTitle != null) {
            stmt.bindString(4, homeworkTitle);
        }
 
        String pages = entity.getPages();
        if (pages != null) {
            stmt.bindString(5, pages);
        }
        stmt.bindLong(6, entity.getCorrectMode());
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(7, score);
        }
 
        String correctJson = entity.getCorrectJson();
        if (correctJson != null) {
            stmt.bindString(8, correctJson);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HomeworkBookCorrectBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getBookId());
 
        String homeworkTitle = entity.getHomeworkTitle();
        if (homeworkTitle != null) {
            stmt.bindString(4, homeworkTitle);
        }
 
        String pages = entity.getPages();
        if (pages != null) {
            stmt.bindString(5, pages);
        }
        stmt.bindLong(6, entity.getCorrectMode());
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(7, score);
        }
 
        String correctJson = entity.getCorrectJson();
        if (correctJson != null) {
            stmt.bindString(8, correctJson);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HomeworkBookCorrectBean readEntity(Cursor cursor, int offset) {
        HomeworkBookCorrectBean entity = new HomeworkBookCorrectBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.getInt(offset + 2), // bookId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // homeworkTitle
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pages
            cursor.getInt(offset + 5), // correctMode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // score
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // correctJson
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HomeworkBookCorrectBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setBookId(cursor.getInt(offset + 2));
        entity.setHomeworkTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPages(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCorrectMode(cursor.getInt(offset + 5));
        entity.setScore(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCorrectJson(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HomeworkBookCorrectBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HomeworkBookCorrectBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HomeworkBookCorrectBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
