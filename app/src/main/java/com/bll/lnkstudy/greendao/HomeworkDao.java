package com.bll.lnkstudy.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bll.lnkstudy.mvp.model.Homework;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOMEWORK".
*/
public class HomeworkDao extends AbstractDao<Homework, Long> {

    public static final String TABLENAME = "HOMEWORK";

    /**
     * Properties of entity Homework.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Index = new Property(1, int.class, "index", false, "INDEX");
        public final static Property BgResId = new Property(2, int.class, "bgResId", false, "BG_RES_ID");
        public final static Property CourseId = new Property(3, int.class, "courseId", false, "COURSE_ID");
        public final static Property HomeworkTypeId = new Property(4, int.class, "homeworkTypeId", false, "HOMEWORK_TYPE_ID");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
        public final static Property StartDate = new Property(6, long.class, "startDate", false, "START_DATE");
        public final static Property EndDate = new Property(7, long.class, "endDate", false, "END_DATE");
        public final static Property Path = new Property(8, String.class, "path", false, "PATH");
        public final static Property Page = new Property(9, int.class, "page", false, "PAGE");
        public final static Property Count = new Property(10, int.class, "count", false, "COUNT");
        public final static Property State = new Property(11, int.class, "state", false, "STATE");
        public final static Property IsSave = new Property(12, boolean.class, "isSave", false, "IS_SAVE");
    }


    public HomeworkDao(DaoConfig config) {
        super(config);
    }
    
    public HomeworkDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOMEWORK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"INDEX\" INTEGER NOT NULL ," + // 1: index
                "\"BG_RES_ID\" INTEGER NOT NULL ," + // 2: bgResId
                "\"COURSE_ID\" INTEGER NOT NULL ," + // 3: courseId
                "\"HOMEWORK_TYPE_ID\" INTEGER NOT NULL ," + // 4: homeworkTypeId
                "\"TITLE\" TEXT," + // 5: title
                "\"START_DATE\" INTEGER NOT NULL ," + // 6: startDate
                "\"END_DATE\" INTEGER NOT NULL ," + // 7: endDate
                "\"PATH\" TEXT," + // 8: path
                "\"PAGE\" INTEGER NOT NULL ," + // 9: page
                "\"COUNT\" INTEGER NOT NULL ," + // 10: count
                "\"STATE\" INTEGER NOT NULL ," + // 11: state
                "\"IS_SAVE\" INTEGER NOT NULL );"); // 12: isSave
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOMEWORK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Homework entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIndex());
        stmt.bindLong(3, entity.getBgResId());
        stmt.bindLong(4, entity.getCourseId());
        stmt.bindLong(5, entity.getHomeworkTypeId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
        stmt.bindLong(7, entity.getStartDate());
        stmt.bindLong(8, entity.getEndDate());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(9, path);
        }
        stmt.bindLong(10, entity.getPage());
        stmt.bindLong(11, entity.getCount());
        stmt.bindLong(12, entity.getState());
        stmt.bindLong(13, entity.getIsSave() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Homework entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIndex());
        stmt.bindLong(3, entity.getBgResId());
        stmt.bindLong(4, entity.getCourseId());
        stmt.bindLong(5, entity.getHomeworkTypeId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
        stmt.bindLong(7, entity.getStartDate());
        stmt.bindLong(8, entity.getEndDate());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(9, path);
        }
        stmt.bindLong(10, entity.getPage());
        stmt.bindLong(11, entity.getCount());
        stmt.bindLong(12, entity.getState());
        stmt.bindLong(13, entity.getIsSave() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Homework readEntity(Cursor cursor, int offset) {
        Homework entity = new Homework( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // index
            cursor.getInt(offset + 2), // bgResId
            cursor.getInt(offset + 3), // courseId
            cursor.getInt(offset + 4), // homeworkTypeId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // title
            cursor.getLong(offset + 6), // startDate
            cursor.getLong(offset + 7), // endDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // path
            cursor.getInt(offset + 9), // page
            cursor.getInt(offset + 10), // count
            cursor.getInt(offset + 11), // state
            cursor.getShort(offset + 12) != 0 // isSave
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Homework entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIndex(cursor.getInt(offset + 1));
        entity.setBgResId(cursor.getInt(offset + 2));
        entity.setCourseId(cursor.getInt(offset + 3));
        entity.setHomeworkTypeId(cursor.getInt(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStartDate(cursor.getLong(offset + 6));
        entity.setEndDate(cursor.getLong(offset + 7));
        entity.setPath(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPage(cursor.getInt(offset + 9));
        entity.setCount(cursor.getInt(offset + 10));
        entity.setState(cursor.getInt(offset + 11));
        entity.setIsSave(cursor.getShort(offset + 12) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Homework entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Homework entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Homework entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
