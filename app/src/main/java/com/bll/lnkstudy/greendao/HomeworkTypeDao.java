package com.bll.lnkstudy.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bll.lnkstudy.mvp.model.HomeworkType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOMEWORK_TYPE".
*/
public class HomeworkTypeDao extends AbstractDao<HomeworkType, Long> {

    public static final String TABLENAME = "HOMEWORK_TYPE";

    /**
     * Properties of entity HomeworkType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property Date = new Property(3, Long.class, "date", false, "DATE");
        public final static Property ResId = new Property(4, int.class, "resId", false, "RES_ID");
        public final static Property BgResId = new Property(5, int.class, "bgResId", false, "BG_RES_ID");
        public final static Property CourseId = new Property(6, int.class, "courseId", false, "COURSE_ID");
        public final static Property IsPg = new Property(7, boolean.class, "isPg", false, "IS_PG");
        public final static Property IsListenToRead = new Property(8, boolean.class, "isListenToRead", false, "IS_LISTEN_TO_READ");
    }


    public HomeworkTypeDao(DaoConfig config) {
        super(config);
    }
    
    public HomeworkTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOMEWORK_TYPE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"TYPE\" INTEGER NOT NULL ," + // 2: type
                "\"DATE\" INTEGER," + // 3: date
                "\"RES_ID\" INTEGER NOT NULL ," + // 4: resId
                "\"BG_RES_ID\" INTEGER NOT NULL ," + // 5: bgResId
                "\"COURSE_ID\" INTEGER NOT NULL ," + // 6: courseId
                "\"IS_PG\" INTEGER NOT NULL ," + // 7: isPg
                "\"IS_LISTEN_TO_READ\" INTEGER NOT NULL );"); // 8: isListenToRead
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOMEWORK_TYPE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HomeworkType entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getType());
 
        Long date = entity.getDate();
        if (date != null) {
            stmt.bindLong(4, date);
        }
        stmt.bindLong(5, entity.getResId());
        stmt.bindLong(6, entity.getBgResId());
        stmt.bindLong(7, entity.getCourseId());
        stmt.bindLong(8, entity.getIsPg() ? 1L: 0L);
        stmt.bindLong(9, entity.getIsListenToRead() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HomeworkType entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getType());
 
        Long date = entity.getDate();
        if (date != null) {
            stmt.bindLong(4, date);
        }
        stmt.bindLong(5, entity.getResId());
        stmt.bindLong(6, entity.getBgResId());
        stmt.bindLong(7, entity.getCourseId());
        stmt.bindLong(8, entity.getIsPg() ? 1L: 0L);
        stmt.bindLong(9, entity.getIsListenToRead() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HomeworkType readEntity(Cursor cursor, int offset) {
        HomeworkType entity = new HomeworkType( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // date
            cursor.getInt(offset + 4), // resId
            cursor.getInt(offset + 5), // bgResId
            cursor.getInt(offset + 6), // courseId
            cursor.getShort(offset + 7) != 0, // isPg
            cursor.getShort(offset + 8) != 0 // isListenToRead
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HomeworkType entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setResId(cursor.getInt(offset + 4));
        entity.setBgResId(cursor.getInt(offset + 5));
        entity.setCourseId(cursor.getInt(offset + 6));
        entity.setIsPg(cursor.getShort(offset + 7) != 0);
        entity.setIsListenToRead(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HomeworkType entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HomeworkType entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HomeworkType entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
