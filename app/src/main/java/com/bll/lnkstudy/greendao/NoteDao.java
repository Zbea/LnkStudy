package com.bll.lnkstudy.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bll.lnkstudy.utils.greendao.NoteConverter;
import java.util.List;

import com.bll.lnkstudy.mvp.model.Note;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTE".
*/
public class NoteDao extends AbstractDao<Note, Long> {

    public static final String TABLENAME = "NOTE";

    /**
     * Properties of entity Note.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, long.class, "date", false, "DATE");
        public final static Property NowDate = new Property(2, long.class, "nowDate", false, "NOW_DATE");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Type = new Property(4, int.class, "type", false, "TYPE");
        public final static Property ResId = new Property(5, int.class, "resId", false, "RES_ID");
        public final static Property Index = new Property(6, int.class, "index", false, "INDEX");
        public final static Property Path = new Property(7, String.class, "path", false, "PATH");
        public final static Property Paths = new Property(8, String.class, "paths", false, "PATHS");
    }

    private final NoteConverter pathsConverter = new NoteConverter();

    public NoteDao(DaoConfig config) {
        super(config);
    }
    
    public NoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DATE\" INTEGER NOT NULL UNIQUE ," + // 1: date
                "\"NOW_DATE\" INTEGER NOT NULL ," + // 2: nowDate
                "\"TITLE\" TEXT," + // 3: title
                "\"TYPE\" INTEGER NOT NULL ," + // 4: type
                "\"RES_ID\" INTEGER NOT NULL ," + // 5: resId
                "\"INDEX\" INTEGER NOT NULL ," + // 6: index
                "\"PATH\" TEXT," + // 7: path
                "\"PATHS\" TEXT);"); // 8: paths
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Note entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDate());
        stmt.bindLong(3, entity.getNowDate());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
        stmt.bindLong(5, entity.getType());
        stmt.bindLong(6, entity.getResId());
        stmt.bindLong(7, entity.getIndex());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(8, path);
        }
 
        List paths = entity.getPaths();
        if (paths != null) {
            stmt.bindString(9, pathsConverter.convertToDatabaseValue(paths));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Note entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDate());
        stmt.bindLong(3, entity.getNowDate());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
        stmt.bindLong(5, entity.getType());
        stmt.bindLong(6, entity.getResId());
        stmt.bindLong(7, entity.getIndex());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(8, path);
        }
 
        List paths = entity.getPaths();
        if (paths != null) {
            stmt.bindString(9, pathsConverter.convertToDatabaseValue(paths));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Note readEntity(Cursor cursor, int offset) {
        Note entity = new Note( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // date
            cursor.getLong(offset + 2), // nowDate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.getInt(offset + 4), // type
            cursor.getInt(offset + 5), // resId
            cursor.getInt(offset + 6), // index
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // path
            cursor.isNull(offset + 8) ? null : pathsConverter.convertToEntityProperty(cursor.getString(offset + 8)) // paths
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Note entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.getLong(offset + 1));
        entity.setNowDate(cursor.getLong(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.getInt(offset + 4));
        entity.setResId(cursor.getInt(offset + 5));
        entity.setIndex(cursor.getInt(offset + 6));
        entity.setPath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPaths(cursor.isNull(offset + 8) ? null : pathsConverter.convertToEntityProperty(cursor.getString(offset + 8)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Note entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Note entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Note entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
