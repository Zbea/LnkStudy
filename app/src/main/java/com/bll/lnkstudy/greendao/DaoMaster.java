package com.bll.lnkstudy.greendao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.util.Log;

import org.greenrobot.greendao.AbstractDaoMaster;
import org.greenrobot.greendao.database.StandardDatabase;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseOpenHelper;
import org.greenrobot.greendao.identityscope.IdentityScopeType;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * Master of DAO (schema version 147): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 147;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(Database db, boolean ifNotExists) {
        AppBeanDao.createTable(db, ifNotExists);
        CalenderItemBeanDao.createTable(db, ifNotExists);
        DataUpdateBeanDao.createTable(db, ifNotExists);
        DiaryBeanDao.createTable(db, ifNotExists);
        FreeNoteBeanDao.createTable(db, ifNotExists);
        ItemTypeBeanDao.createTable(db, ifNotExists);
        RecordBeanDao.createTable(db, ifNotExists);
        BookBeanDao.createTable(db, ifNotExists);
        TextbookBeanDao.createTable(db, ifNotExists);
        DateEventBeanDao.createTable(db, ifNotExists);
        HomeworkBookBeanDao.createTable(db, ifNotExists);
        HomeworkBookCorrectBeanDao.createTable(db, ifNotExists);
        HomeworkContentBeanDao.createTable(db, ifNotExists);
        HomeworkPaperBeanDao.createTable(db, ifNotExists);
        HomeworkShareBeanDao.createTable(db, ifNotExists);
        HomeworkTypeBeanDao.createTable(db, ifNotExists);
        NoteDao.createTable(db, ifNotExists);
        NoteContentBeanDao.createTable(db, ifNotExists);
        PaintingBeanDao.createTable(db, ifNotExists);
        PaintingDrawingBeanDao.createTable(db, ifNotExists);
        PaperBeanDao.createTable(db, ifNotExists);
        PaperTypeBeanDao.createTable(db, ifNotExists);
    }

    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(Database db, boolean ifExists) {
        AppBeanDao.dropTable(db, ifExists);
        CalenderItemBeanDao.dropTable(db, ifExists);
        DataUpdateBeanDao.dropTable(db, ifExists);
        DiaryBeanDao.dropTable(db, ifExists);
        FreeNoteBeanDao.dropTable(db, ifExists);
        ItemTypeBeanDao.dropTable(db, ifExists);
        RecordBeanDao.dropTable(db, ifExists);
        BookBeanDao.dropTable(db, ifExists);
        TextbookBeanDao.dropTable(db, ifExists);
        DateEventBeanDao.dropTable(db, ifExists);
        HomeworkBookBeanDao.dropTable(db, ifExists);
        HomeworkBookCorrectBeanDao.dropTable(db, ifExists);
        HomeworkContentBeanDao.dropTable(db, ifExists);
        HomeworkPaperBeanDao.dropTable(db, ifExists);
        HomeworkShareBeanDao.dropTable(db, ifExists);
        HomeworkTypeBeanDao.dropTable(db, ifExists);
        NoteDao.dropTable(db, ifExists);
        NoteContentBeanDao.dropTable(db, ifExists);
        PaintingBeanDao.dropTable(db, ifExists);
        PaintingDrawingBeanDao.dropTable(db, ifExists);
        PaperBeanDao.dropTable(db, ifExists);
        PaperTypeBeanDao.dropTable(db, ifExists);
    }

    /**
     * WARNING: Drops all table on Upgrade! Use only during development.
     * Convenience method using a {@link DevOpenHelper}.
     */
    public static DaoSession newDevSession(Context context, String name) {
        Database db = new DevOpenHelper(context, name).getWritableDb();
        DaoMaster daoMaster = new DaoMaster(db);
        return daoMaster.newSession();
    }

    public DaoMaster(SQLiteDatabase db) {
        this(new StandardDatabase(db));
    }

    public DaoMaster(Database db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(AppBeanDao.class);
        registerDaoClass(CalenderItemBeanDao.class);
        registerDaoClass(DataUpdateBeanDao.class);
        registerDaoClass(DiaryBeanDao.class);
        registerDaoClass(FreeNoteBeanDao.class);
        registerDaoClass(ItemTypeBeanDao.class);
        registerDaoClass(RecordBeanDao.class);
        registerDaoClass(BookBeanDao.class);
        registerDaoClass(TextbookBeanDao.class);
        registerDaoClass(DateEventBeanDao.class);
        registerDaoClass(HomeworkBookBeanDao.class);
        registerDaoClass(HomeworkBookCorrectBeanDao.class);
        registerDaoClass(HomeworkContentBeanDao.class);
        registerDaoClass(HomeworkPaperBeanDao.class);
        registerDaoClass(HomeworkShareBeanDao.class);
        registerDaoClass(HomeworkTypeBeanDao.class);
        registerDaoClass(NoteDao.class);
        registerDaoClass(NoteContentBeanDao.class);
        registerDaoClass(PaintingBeanDao.class);
        registerDaoClass(PaintingDrawingBeanDao.class);
        registerDaoClass(PaperBeanDao.class);
        registerDaoClass(PaperTypeBeanDao.class);
    }

    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }

    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }

    /**
     * Calls {@link #createAllTables(Database, boolean)} in {@link #onCreate(Database)} -
     */
    public static abstract class OpenHelper extends DatabaseOpenHelper {
        public OpenHelper(Context context, String name) {
            super(context, name, SCHEMA_VERSION);
        }

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(Database db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }

    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name) {
            super(context, name);
        }

        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(Database db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

}
