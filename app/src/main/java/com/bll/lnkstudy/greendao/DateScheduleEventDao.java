package com.bll.lnkstudy.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bll.lnkstudy.utils.greendao.DateRemindConverter;
import java.util.List;

import com.bll.lnkstudy.mvp.model.DateScheduleEvent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DATE_SCHEDULE_EVENT".
*/
public class DateScheduleEventDao extends AbstractDao<DateScheduleEvent, Long> {

    public static final String TABLENAME = "DATE_SCHEDULE_EVENT";

    /**
     * Properties of entity DateScheduleEvent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property ScheduleTitle = new Property(2, String.class, "scheduleTitle", false, "SCHEDULE_TITLE");
        public final static Property ScheduleDay = new Property(3, long.class, "scheduleDay", false, "SCHEDULE_DAY");
        public final static Property ScheduleStartTime = new Property(4, long.class, "scheduleStartTime", false, "SCHEDULE_START_TIME");
        public final static Property ScheduleEndTime = new Property(5, long.class, "scheduleEndTime", false, "SCHEDULE_END_TIME");
        public final static Property ScheduleStartTimeStr = new Property(6, String.class, "scheduleStartTimeStr", false, "SCHEDULE_START_TIME_STR");
        public final static Property ScheduleEndTimeStr = new Property(7, String.class, "scheduleEndTimeStr", false, "SCHEDULE_END_TIME_STR");
        public final static Property RemindList = new Property(8, String.class, "remindList", false, "REMIND_LIST");
        public final static Property Repeat = new Property(9, String.class, "repeat", false, "REPEAT");
    }

    private final DateRemindConverter remindListConverter = new DateRemindConverter();

    public DateScheduleEventDao(DaoConfig config) {
        super(config);
    }
    
    public DateScheduleEventDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DATE_SCHEDULE_EVENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"SCHEDULE_TITLE\" TEXT," + // 2: scheduleTitle
                "\"SCHEDULE_DAY\" INTEGER NOT NULL ," + // 3: scheduleDay
                "\"SCHEDULE_START_TIME\" INTEGER NOT NULL ," + // 4: scheduleStartTime
                "\"SCHEDULE_END_TIME\" INTEGER NOT NULL ," + // 5: scheduleEndTime
                "\"SCHEDULE_START_TIME_STR\" TEXT," + // 6: scheduleStartTimeStr
                "\"SCHEDULE_END_TIME_STR\" TEXT," + // 7: scheduleEndTimeStr
                "\"REMIND_LIST\" TEXT," + // 8: remindList
                "\"REPEAT\" TEXT);"); // 9: repeat
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATE_SCHEDULE_EVENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DateScheduleEvent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
 
        String scheduleTitle = entity.getScheduleTitle();
        if (scheduleTitle != null) {
            stmt.bindString(3, scheduleTitle);
        }
        stmt.bindLong(4, entity.getScheduleDay());
        stmt.bindLong(5, entity.getScheduleStartTime());
        stmt.bindLong(6, entity.getScheduleEndTime());
 
        String scheduleStartTimeStr = entity.getScheduleStartTimeStr();
        if (scheduleStartTimeStr != null) {
            stmt.bindString(7, scheduleStartTimeStr);
        }
 
        String scheduleEndTimeStr = entity.getScheduleEndTimeStr();
        if (scheduleEndTimeStr != null) {
            stmt.bindString(8, scheduleEndTimeStr);
        }
 
        List remindList = entity.getRemindList();
        if (remindList != null) {
            stmt.bindString(9, remindListConverter.convertToDatabaseValue(remindList));
        }
 
        String repeat = entity.getRepeat();
        if (repeat != null) {
            stmt.bindString(10, repeat);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DateScheduleEvent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
 
        String scheduleTitle = entity.getScheduleTitle();
        if (scheduleTitle != null) {
            stmt.bindString(3, scheduleTitle);
        }
        stmt.bindLong(4, entity.getScheduleDay());
        stmt.bindLong(5, entity.getScheduleStartTime());
        stmt.bindLong(6, entity.getScheduleEndTime());
 
        String scheduleStartTimeStr = entity.getScheduleStartTimeStr();
        if (scheduleStartTimeStr != null) {
            stmt.bindString(7, scheduleStartTimeStr);
        }
 
        String scheduleEndTimeStr = entity.getScheduleEndTimeStr();
        if (scheduleEndTimeStr != null) {
            stmt.bindString(8, scheduleEndTimeStr);
        }
 
        List remindList = entity.getRemindList();
        if (remindList != null) {
            stmt.bindString(9, remindListConverter.convertToDatabaseValue(remindList));
        }
 
        String repeat = entity.getRepeat();
        if (repeat != null) {
            stmt.bindString(10, repeat);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DateScheduleEvent readEntity(Cursor cursor, int offset) {
        DateScheduleEvent entity = new DateScheduleEvent( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // scheduleTitle
            cursor.getLong(offset + 3), // scheduleDay
            cursor.getLong(offset + 4), // scheduleStartTime
            cursor.getLong(offset + 5), // scheduleEndTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // scheduleStartTimeStr
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // scheduleEndTimeStr
            cursor.isNull(offset + 8) ? null : remindListConverter.convertToEntityProperty(cursor.getString(offset + 8)), // remindList
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // repeat
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DateScheduleEvent entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setScheduleTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setScheduleDay(cursor.getLong(offset + 3));
        entity.setScheduleStartTime(cursor.getLong(offset + 4));
        entity.setScheduleEndTime(cursor.getLong(offset + 5));
        entity.setScheduleStartTimeStr(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setScheduleEndTimeStr(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRemindList(cursor.isNull(offset + 8) ? null : remindListConverter.convertToEntityProperty(cursor.getString(offset + 8)));
        entity.setRepeat(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DateScheduleEvent entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DateScheduleEvent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DateScheduleEvent entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
