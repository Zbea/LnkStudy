package com.bll.lnkstudy.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bll.lnkstudy.utils.greendao.StringConverter;
import java.util.List;

import com.bll.lnkstudy.mvp.model.DiaryBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DIARY_BEAN".
*/
public class DiaryBeanDao extends AbstractDao<DiaryBean, Long> {

    public static final String TABLENAME = "DIARY_BEAN";

    /**
     * Properties of entity DiaryBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Date = new Property(3, long.class, "date", false, "DATE");
        public final static Property Year = new Property(4, int.class, "year", false, "YEAR");
        public final static Property Month = new Property(5, int.class, "month", false, "MONTH");
        public final static Property BgRes = new Property(6, String.class, "bgRes", false, "BG_RES");
        public final static Property Page = new Property(7, int.class, "page", false, "PAGE");
        public final static Property UploadId = new Property(8, int.class, "uploadId", false, "UPLOAD_ID");
        public final static Property IsUpload = new Property(9, boolean.class, "isUpload", false, "IS_UPLOAD");
        public final static Property Paths = new Property(10, String.class, "paths", false, "PATHS");
    }

    private final StringConverter pathsConverter = new StringConverter();

    public DiaryBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DiaryBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DIARY_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"TITLE\" TEXT," + // 2: title
                "\"DATE\" INTEGER NOT NULL ," + // 3: date
                "\"YEAR\" INTEGER NOT NULL ," + // 4: year
                "\"MONTH\" INTEGER NOT NULL ," + // 5: month
                "\"BG_RES\" TEXT," + // 6: bgRes
                "\"PAGE\" INTEGER NOT NULL ," + // 7: page
                "\"UPLOAD_ID\" INTEGER NOT NULL ," + // 8: uploadId
                "\"IS_UPLOAD\" INTEGER NOT NULL ," + // 9: isUpload
                "\"PATHS\" TEXT);"); // 10: paths
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DIARY_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DiaryBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
        stmt.bindLong(4, entity.getDate());
        stmt.bindLong(5, entity.getYear());
        stmt.bindLong(6, entity.getMonth());
 
        String bgRes = entity.getBgRes();
        if (bgRes != null) {
            stmt.bindString(7, bgRes);
        }
        stmt.bindLong(8, entity.getPage());
        stmt.bindLong(9, entity.getUploadId());
        stmt.bindLong(10, entity.getIsUpload() ? 1L: 0L);
 
        List paths = entity.getPaths();
        if (paths != null) {
            stmt.bindString(11, pathsConverter.convertToDatabaseValue(paths));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DiaryBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
        stmt.bindLong(4, entity.getDate());
        stmt.bindLong(5, entity.getYear());
        stmt.bindLong(6, entity.getMonth());
 
        String bgRes = entity.getBgRes();
        if (bgRes != null) {
            stmt.bindString(7, bgRes);
        }
        stmt.bindLong(8, entity.getPage());
        stmt.bindLong(9, entity.getUploadId());
        stmt.bindLong(10, entity.getIsUpload() ? 1L: 0L);
 
        List paths = entity.getPaths();
        if (paths != null) {
            stmt.bindString(11, pathsConverter.convertToDatabaseValue(paths));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DiaryBean readEntity(Cursor cursor, int offset) {
        DiaryBean entity = new DiaryBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.getLong(offset + 3), // date
            cursor.getInt(offset + 4), // year
            cursor.getInt(offset + 5), // month
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // bgRes
            cursor.getInt(offset + 7), // page
            cursor.getInt(offset + 8), // uploadId
            cursor.getShort(offset + 9) != 0, // isUpload
            cursor.isNull(offset + 10) ? null : pathsConverter.convertToEntityProperty(cursor.getString(offset + 10)) // paths
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DiaryBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDate(cursor.getLong(offset + 3));
        entity.setYear(cursor.getInt(offset + 4));
        entity.setMonth(cursor.getInt(offset + 5));
        entity.setBgRes(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPage(cursor.getInt(offset + 7));
        entity.setUploadId(cursor.getInt(offset + 8));
        entity.setIsUpload(cursor.getShort(offset + 9) != 0);
        entity.setPaths(cursor.isNull(offset + 10) ? null : pathsConverter.convertToEntityProperty(cursor.getString(offset + 10)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DiaryBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DiaryBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DiaryBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
