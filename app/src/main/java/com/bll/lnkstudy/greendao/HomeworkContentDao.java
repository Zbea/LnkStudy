package com.bll.lnkstudy.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bll.lnkstudy.mvp.model.HomeworkContent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOMEWORK_CONTENT".
*/
public class HomeworkContentDao extends AbstractDao<HomeworkContent, Long> {

    public static final String TABLENAME = "HOMEWORK_CONTENT";

    /**
     * Properties of entity HomeworkContent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BgResId = new Property(1, int.class, "bgResId", false, "BG_RES_ID");
        public final static Property CourseId = new Property(2, int.class, "courseId", false, "COURSE_ID");
        public final static Property HomeworkTypeId = new Property(3, int.class, "homeworkTypeId", false, "HOMEWORK_TYPE_ID");
        public final static Property HomeworkId = new Property(4, long.class, "homeworkId", false, "HOMEWORK_ID");
        public final static Property Date = new Property(5, long.class, "date", false, "DATE");
        public final static Property Path = new Property(6, String.class, "path", false, "PATH");
        public final static Property Page = new Property(7, int.class, "page", false, "PAGE");
    }


    public HomeworkContentDao(DaoConfig config) {
        super(config);
    }
    
    public HomeworkContentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOMEWORK_CONTENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"BG_RES_ID\" INTEGER NOT NULL ," + // 1: bgResId
                "\"COURSE_ID\" INTEGER NOT NULL ," + // 2: courseId
                "\"HOMEWORK_TYPE_ID\" INTEGER NOT NULL ," + // 3: homeworkTypeId
                "\"HOMEWORK_ID\" INTEGER NOT NULL ," + // 4: homeworkId
                "\"DATE\" INTEGER NOT NULL ," + // 5: date
                "\"PATH\" TEXT," + // 6: path
                "\"PAGE\" INTEGER NOT NULL );"); // 7: page
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOMEWORK_CONTENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HomeworkContent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getBgResId());
        stmt.bindLong(3, entity.getCourseId());
        stmt.bindLong(4, entity.getHomeworkTypeId());
        stmt.bindLong(5, entity.getHomeworkId());
        stmt.bindLong(6, entity.getDate());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(7, path);
        }
        stmt.bindLong(8, entity.getPage());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HomeworkContent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getBgResId());
        stmt.bindLong(3, entity.getCourseId());
        stmt.bindLong(4, entity.getHomeworkTypeId());
        stmt.bindLong(5, entity.getHomeworkId());
        stmt.bindLong(6, entity.getDate());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(7, path);
        }
        stmt.bindLong(8, entity.getPage());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HomeworkContent readEntity(Cursor cursor, int offset) {
        HomeworkContent entity = new HomeworkContent( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // bgResId
            cursor.getInt(offset + 2), // courseId
            cursor.getInt(offset + 3), // homeworkTypeId
            cursor.getLong(offset + 4), // homeworkId
            cursor.getLong(offset + 5), // date
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // path
            cursor.getInt(offset + 7) // page
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HomeworkContent entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBgResId(cursor.getInt(offset + 1));
        entity.setCourseId(cursor.getInt(offset + 2));
        entity.setHomeworkTypeId(cursor.getInt(offset + 3));
        entity.setHomeworkId(cursor.getLong(offset + 4));
        entity.setDate(cursor.getLong(offset + 5));
        entity.setPath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPage(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HomeworkContent entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HomeworkContent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HomeworkContent entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
