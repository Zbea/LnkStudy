package com.bll.lnkstudy.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bll.lnkstudy.utils.greendao.StringConverter;
import java.util.List;

import com.bll.lnkstudy.mvp.model.paper.PaperBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PAPER_BEAN".
*/
public class PaperBeanDao extends AbstractDao<PaperBean, Long> {

    public static final String TABLENAME = "PAPER_BEAN";

    /**
     * Properties of entity PaperBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property ContentId = new Property(2, int.class, "contentId", false, "CONTENT_ID");
        public final static Property Course = new Property(3, String.class, "course", false, "COURSE");
        public final static Property PaperTypeId = new Property(4, int.class, "paperTypeId", false, "PAPER_TYPE_ID");
        public final static Property TypeId = new Property(5, int.class, "typeId", false, "TYPE_ID");
        public final static Property Grade = new Property(6, int.class, "grade", false, "GRADE");
        public final static Property TypeName = new Property(7, String.class, "typeName", false, "TYPE_NAME");
        public final static Property Title = new Property(8, String.class, "title", false, "TITLE");
        public final static Property FilePath = new Property(9, String.class, "filePath", false, "FILE_PATH");
        public final static Property Paths = new Property(10, String.class, "paths", false, "PATHS");
        public final static Property DrawPaths = new Property(11, String.class, "drawPaths", false, "DRAW_PATHS");
        public final static Property Page = new Property(12, int.class, "page", false, "PAGE");
        public final static Property CorrectMode = new Property(13, int.class, "correctMode", false, "CORRECT_MODE");
        public final static Property Score = new Property(14, String.class, "score", false, "SCORE");
        public final static Property CorrectJson = new Property(15, String.class, "correctJson", false, "CORRECT_JSON");
        public final static Property AnswerUrl = new Property(16, String.class, "answerUrl", false, "ANSWER_URL");
        public final static Property ScoreMode = new Property(17, int.class, "scoreMode", false, "SCORE_MODE");
    }

    private final StringConverter pathsConverter = new StringConverter();
    private final StringConverter drawPathsConverter = new StringConverter();

    public PaperBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PaperBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PAPER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"CONTENT_ID\" INTEGER NOT NULL ," + // 2: contentId
                "\"COURSE\" TEXT," + // 3: course
                "\"PAPER_TYPE_ID\" INTEGER NOT NULL ," + // 4: paperTypeId
                "\"TYPE_ID\" INTEGER NOT NULL ," + // 5: typeId
                "\"GRADE\" INTEGER NOT NULL ," + // 6: grade
                "\"TYPE_NAME\" TEXT," + // 7: typeName
                "\"TITLE\" TEXT," + // 8: title
                "\"FILE_PATH\" TEXT," + // 9: filePath
                "\"PATHS\" TEXT," + // 10: paths
                "\"DRAW_PATHS\" TEXT," + // 11: drawPaths
                "\"PAGE\" INTEGER NOT NULL ," + // 12: page
                "\"CORRECT_MODE\" INTEGER NOT NULL ," + // 13: correctMode
                "\"SCORE\" TEXT," + // 14: score
                "\"CORRECT_JSON\" TEXT," + // 15: correctJson
                "\"ANSWER_URL\" TEXT," + // 16: answerUrl
                "\"SCORE_MODE\" INTEGER NOT NULL );"); // 17: scoreMode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PAPER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PaperBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getContentId());
 
        String course = entity.getCourse();
        if (course != null) {
            stmt.bindString(4, course);
        }
        stmt.bindLong(5, entity.getPaperTypeId());
        stmt.bindLong(6, entity.getTypeId());
        stmt.bindLong(7, entity.getGrade());
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(8, typeName);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(9, title);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(10, filePath);
        }
 
        List paths = entity.getPaths();
        if (paths != null) {
            stmt.bindString(11, pathsConverter.convertToDatabaseValue(paths));
        }
 
        List drawPaths = entity.getDrawPaths();
        if (drawPaths != null) {
            stmt.bindString(12, drawPathsConverter.convertToDatabaseValue(drawPaths));
        }
        stmt.bindLong(13, entity.getPage());
        stmt.bindLong(14, entity.getCorrectMode());
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(15, score);
        }
 
        String correctJson = entity.getCorrectJson();
        if (correctJson != null) {
            stmt.bindString(16, correctJson);
        }
 
        String answerUrl = entity.getAnswerUrl();
        if (answerUrl != null) {
            stmt.bindString(17, answerUrl);
        }
        stmt.bindLong(18, entity.getScoreMode());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PaperBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getContentId());
 
        String course = entity.getCourse();
        if (course != null) {
            stmt.bindString(4, course);
        }
        stmt.bindLong(5, entity.getPaperTypeId());
        stmt.bindLong(6, entity.getTypeId());
        stmt.bindLong(7, entity.getGrade());
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(8, typeName);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(9, title);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(10, filePath);
        }
 
        List paths = entity.getPaths();
        if (paths != null) {
            stmt.bindString(11, pathsConverter.convertToDatabaseValue(paths));
        }
 
        List drawPaths = entity.getDrawPaths();
        if (drawPaths != null) {
            stmt.bindString(12, drawPathsConverter.convertToDatabaseValue(drawPaths));
        }
        stmt.bindLong(13, entity.getPage());
        stmt.bindLong(14, entity.getCorrectMode());
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(15, score);
        }
 
        String correctJson = entity.getCorrectJson();
        if (correctJson != null) {
            stmt.bindString(16, correctJson);
        }
 
        String answerUrl = entity.getAnswerUrl();
        if (answerUrl != null) {
            stmt.bindString(17, answerUrl);
        }
        stmt.bindLong(18, entity.getScoreMode());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PaperBean readEntity(Cursor cursor, int offset) {
        PaperBean entity = new PaperBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.getInt(offset + 2), // contentId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // course
            cursor.getInt(offset + 4), // paperTypeId
            cursor.getInt(offset + 5), // typeId
            cursor.getInt(offset + 6), // grade
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // typeName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // title
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // filePath
            cursor.isNull(offset + 10) ? null : pathsConverter.convertToEntityProperty(cursor.getString(offset + 10)), // paths
            cursor.isNull(offset + 11) ? null : drawPathsConverter.convertToEntityProperty(cursor.getString(offset + 11)), // drawPaths
            cursor.getInt(offset + 12), // page
            cursor.getInt(offset + 13), // correctMode
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // score
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // correctJson
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // answerUrl
            cursor.getInt(offset + 17) // scoreMode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PaperBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setContentId(cursor.getInt(offset + 2));
        entity.setCourse(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPaperTypeId(cursor.getInt(offset + 4));
        entity.setTypeId(cursor.getInt(offset + 5));
        entity.setGrade(cursor.getInt(offset + 6));
        entity.setTypeName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTitle(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFilePath(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPaths(cursor.isNull(offset + 10) ? null : pathsConverter.convertToEntityProperty(cursor.getString(offset + 10)));
        entity.setDrawPaths(cursor.isNull(offset + 11) ? null : drawPathsConverter.convertToEntityProperty(cursor.getString(offset + 11)));
        entity.setPage(cursor.getInt(offset + 12));
        entity.setCorrectMode(cursor.getInt(offset + 13));
        entity.setScore(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCorrectJson(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setAnswerUrl(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setScoreMode(cursor.getInt(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PaperBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PaperBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PaperBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
