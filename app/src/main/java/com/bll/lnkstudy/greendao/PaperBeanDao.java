package com.bll.lnkstudy.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bll.lnkstudy.mvp.model.PaperBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PAPER_BEAN".
*/
public class PaperBeanDao extends AbstractDao<PaperBean, Long> {

    public static final String TABLENAME = "PAPER_BEAN";

    /**
     * Properties of entity PaperBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property ContentId = new Property(2, int.class, "contentId", false, "CONTENT_ID");
        public final static Property Type = new Property(3, int.class, "type", false, "TYPE");
        public final static Property CourseId = new Property(4, int.class, "courseId", false, "COURSE_ID");
        public final static Property Course = new Property(5, String.class, "course", false, "COURSE");
        public final static Property CategoryId = new Property(6, int.class, "categoryId", false, "CATEGORY_ID");
        public final static Property Category = new Property(7, String.class, "category", false, "CATEGORY");
        public final static Property Index = new Property(8, int.class, "index", false, "INDEX");
        public final static Property Title = new Property(9, String.class, "title", false, "TITLE");
        public final static Property Rank = new Property(10, int.class, "rank", false, "RANK");
        public final static Property Score = new Property(11, double.class, "score", false, "SCORE");
        public final static Property CreateDate = new Property(12, long.class, "createDate", false, "CREATE_DATE");
        public final static Property Date = new Property(13, long.class, "date", false, "DATE");
        public final static Property Path = new Property(14, String.class, "path", false, "PATH");
        public final static Property Page = new Property(15, int.class, "page", false, "PAGE");
        public final static Property IsPg = new Property(16, boolean.class, "isPg", false, "IS_PG");
        public final static Property Images = new Property(17, String.class, "images", false, "IMAGES");
    }


    public PaperBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PaperBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PAPER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"CONTENT_ID\" INTEGER NOT NULL UNIQUE ," + // 2: contentId
                "\"TYPE\" INTEGER NOT NULL ," + // 3: type
                "\"COURSE_ID\" INTEGER NOT NULL ," + // 4: courseId
                "\"COURSE\" TEXT," + // 5: course
                "\"CATEGORY_ID\" INTEGER NOT NULL ," + // 6: categoryId
                "\"CATEGORY\" TEXT," + // 7: category
                "\"INDEX\" INTEGER NOT NULL ," + // 8: index
                "\"TITLE\" TEXT," + // 9: title
                "\"RANK\" INTEGER NOT NULL ," + // 10: rank
                "\"SCORE\" REAL NOT NULL ," + // 11: score
                "\"CREATE_DATE\" INTEGER NOT NULL ," + // 12: createDate
                "\"DATE\" INTEGER NOT NULL ," + // 13: date
                "\"PATH\" TEXT," + // 14: path
                "\"PAGE\" INTEGER NOT NULL ," + // 15: page
                "\"IS_PG\" INTEGER NOT NULL ," + // 16: isPg
                "\"IMAGES\" TEXT);"); // 17: images
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PAPER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PaperBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getContentId());
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getCourseId());
 
        String course = entity.getCourse();
        if (course != null) {
            stmt.bindString(6, course);
        }
        stmt.bindLong(7, entity.getCategoryId());
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(8, category);
        }
        stmt.bindLong(9, entity.getIndex());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(10, title);
        }
        stmt.bindLong(11, entity.getRank());
        stmt.bindDouble(12, entity.getScore());
        stmt.bindLong(13, entity.getCreateDate());
        stmt.bindLong(14, entity.getDate());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(15, path);
        }
        stmt.bindLong(16, entity.getPage());
        stmt.bindLong(17, entity.getIsPg() ? 1L: 0L);
 
        String images = entity.getImages();
        if (images != null) {
            stmt.bindString(18, images);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PaperBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getContentId());
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getCourseId());
 
        String course = entity.getCourse();
        if (course != null) {
            stmt.bindString(6, course);
        }
        stmt.bindLong(7, entity.getCategoryId());
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(8, category);
        }
        stmt.bindLong(9, entity.getIndex());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(10, title);
        }
        stmt.bindLong(11, entity.getRank());
        stmt.bindDouble(12, entity.getScore());
        stmt.bindLong(13, entity.getCreateDate());
        stmt.bindLong(14, entity.getDate());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(15, path);
        }
        stmt.bindLong(16, entity.getPage());
        stmt.bindLong(17, entity.getIsPg() ? 1L: 0L);
 
        String images = entity.getImages();
        if (images != null) {
            stmt.bindString(18, images);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PaperBean readEntity(Cursor cursor, int offset) {
        PaperBean entity = new PaperBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.getInt(offset + 2), // contentId
            cursor.getInt(offset + 3), // type
            cursor.getInt(offset + 4), // courseId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // course
            cursor.getInt(offset + 6), // categoryId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // category
            cursor.getInt(offset + 8), // index
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // title
            cursor.getInt(offset + 10), // rank
            cursor.getDouble(offset + 11), // score
            cursor.getLong(offset + 12), // createDate
            cursor.getLong(offset + 13), // date
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // path
            cursor.getInt(offset + 15), // page
            cursor.getShort(offset + 16) != 0, // isPg
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // images
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PaperBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setContentId(cursor.getInt(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setCourseId(cursor.getInt(offset + 4));
        entity.setCourse(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCategoryId(cursor.getInt(offset + 6));
        entity.setCategory(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIndex(cursor.getInt(offset + 8));
        entity.setTitle(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRank(cursor.getInt(offset + 10));
        entity.setScore(cursor.getDouble(offset + 11));
        entity.setCreateDate(cursor.getLong(offset + 12));
        entity.setDate(cursor.getLong(offset + 13));
        entity.setPath(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPage(cursor.getInt(offset + 15));
        entity.setIsPg(cursor.getShort(offset + 16) != 0);
        entity.setImages(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PaperBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PaperBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PaperBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
