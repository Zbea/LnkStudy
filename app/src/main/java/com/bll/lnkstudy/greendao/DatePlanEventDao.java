package com.bll.lnkstudy.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bll.lnkstudy.utils.greendao.DatePlanConverter;
import com.bll.lnkstudy.utils.greendao.DateRemindConverter;
import java.util.List;

import com.bll.lnkstudy.mvp.model.DatePlanEvent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DATE_PLAN_EVENT".
*/
public class DatePlanEventDao extends AbstractDao<DatePlanEvent, Long> {

    public static final String TABLENAME = "DATE_PLAN_EVENT";

    /**
     * Properties of entity DatePlanEvent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DayLong = new Property(1, Long.class, "dayLong", false, "DAY_LONG");
        public final static Property StartTime = new Property(2, Long.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(3, Long.class, "endTime", false, "END_TIME");
        public final static Property StartTimeStr = new Property(4, String.class, "startTimeStr", false, "START_TIME_STR");
        public final static Property EndTimeStr = new Property(5, String.class, "endTimeStr", false, "END_TIME_STR");
        public final static Property List = new Property(6, String.class, "list", false, "LIST");
        public final static Property RemindList = new Property(7, String.class, "remindList", false, "REMIND_LIST");
        public final static Property Repeat = new Property(8, String.class, "repeat", false, "REPEAT");
    }

    private final DatePlanConverter listConverter = new DatePlanConverter();
    private final DateRemindConverter remindListConverter = new DateRemindConverter();

    public DatePlanEventDao(DaoConfig config) {
        super(config);
    }
    
    public DatePlanEventDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DATE_PLAN_EVENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"DAY_LONG\" INTEGER," + // 1: dayLong
                "\"START_TIME\" INTEGER," + // 2: startTime
                "\"END_TIME\" INTEGER," + // 3: endTime
                "\"START_TIME_STR\" TEXT," + // 4: startTimeStr
                "\"END_TIME_STR\" TEXT," + // 5: endTimeStr
                "\"LIST\" TEXT," + // 6: list
                "\"REMIND_LIST\" TEXT," + // 7: remindList
                "\"REPEAT\" TEXT);"); // 8: repeat
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATE_PLAN_EVENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DatePlanEvent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long dayLong = entity.getDayLong();
        if (dayLong != null) {
            stmt.bindLong(2, dayLong);
        }
 
        Long startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(3, startTime);
        }
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(4, endTime);
        }
 
        String startTimeStr = entity.getStartTimeStr();
        if (startTimeStr != null) {
            stmt.bindString(5, startTimeStr);
        }
 
        String endTimeStr = entity.getEndTimeStr();
        if (endTimeStr != null) {
            stmt.bindString(6, endTimeStr);
        }
 
        List list = entity.getList();
        if (list != null) {
            stmt.bindString(7, listConverter.convertToDatabaseValue(list));
        }
 
        List remindList = entity.getRemindList();
        if (remindList != null) {
            stmt.bindString(8, remindListConverter.convertToDatabaseValue(remindList));
        }
 
        String repeat = entity.getRepeat();
        if (repeat != null) {
            stmt.bindString(9, repeat);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DatePlanEvent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long dayLong = entity.getDayLong();
        if (dayLong != null) {
            stmt.bindLong(2, dayLong);
        }
 
        Long startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(3, startTime);
        }
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(4, endTime);
        }
 
        String startTimeStr = entity.getStartTimeStr();
        if (startTimeStr != null) {
            stmt.bindString(5, startTimeStr);
        }
 
        String endTimeStr = entity.getEndTimeStr();
        if (endTimeStr != null) {
            stmt.bindString(6, endTimeStr);
        }
 
        List list = entity.getList();
        if (list != null) {
            stmt.bindString(7, listConverter.convertToDatabaseValue(list));
        }
 
        List remindList = entity.getRemindList();
        if (remindList != null) {
            stmt.bindString(8, remindListConverter.convertToDatabaseValue(remindList));
        }
 
        String repeat = entity.getRepeat();
        if (repeat != null) {
            stmt.bindString(9, repeat);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DatePlanEvent readEntity(Cursor cursor, int offset) {
        DatePlanEvent entity = new DatePlanEvent( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // dayLong
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // startTime
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // endTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // startTimeStr
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // endTimeStr
            cursor.isNull(offset + 6) ? null : listConverter.convertToEntityProperty(cursor.getString(offset + 6)), // list
            cursor.isNull(offset + 7) ? null : remindListConverter.convertToEntityProperty(cursor.getString(offset + 7)), // remindList
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // repeat
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DatePlanEvent entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDayLong(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setStartTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setEndTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setStartTimeStr(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEndTimeStr(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setList(cursor.isNull(offset + 6) ? null : listConverter.convertToEntityProperty(cursor.getString(offset + 6)));
        entity.setRemindList(cursor.isNull(offset + 7) ? null : remindListConverter.convertToEntityProperty(cursor.getString(offset + 7)));
        entity.setRepeat(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DatePlanEvent entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DatePlanEvent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DatePlanEvent entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
