package com.bll.lnkstudy.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bll.lnkstudy.mvp.model.homework.HomeworkDetailsBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOMEWORK_DETAILS_BEAN".
*/
public class HomeworkDetailsBeanDao extends AbstractDao<HomeworkDetailsBean, Long> {

    public static final String TABLENAME = "HOMEWORK_DETAILS_BEAN";

    /**
     * Properties of entity HomeworkDetailsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property HomeworkTypeStr = new Property(3, String.class, "homeworkTypeStr", false, "HOMEWORK_TYPE_STR");
        public final static Property Course = new Property(4, String.class, "course", false, "COURSE");
        public final static Property Time = new Property(5, long.class, "time", false, "TIME");
    }


    public HomeworkDetailsBeanDao(DaoConfig config) {
        super(config);
    }
    
    public HomeworkDetailsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOMEWORK_DETAILS_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"CONTENT\" TEXT," + // 2: content
                "\"HOMEWORK_TYPE_STR\" TEXT," + // 3: homeworkTypeStr
                "\"COURSE\" TEXT," + // 4: course
                "\"TIME\" INTEGER NOT NULL );"); // 5: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOMEWORK_DETAILS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HomeworkDetailsBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String homeworkTypeStr = entity.getHomeworkTypeStr();
        if (homeworkTypeStr != null) {
            stmt.bindString(4, homeworkTypeStr);
        }
 
        String course = entity.getCourse();
        if (course != null) {
            stmt.bindString(5, course);
        }
        stmt.bindLong(6, entity.getTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HomeworkDetailsBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String homeworkTypeStr = entity.getHomeworkTypeStr();
        if (homeworkTypeStr != null) {
            stmt.bindString(4, homeworkTypeStr);
        }
 
        String course = entity.getCourse();
        if (course != null) {
            stmt.bindString(5, course);
        }
        stmt.bindLong(6, entity.getTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HomeworkDetailsBean readEntity(Cursor cursor, int offset) {
        HomeworkDetailsBean entity = new HomeworkDetailsBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // homeworkTypeStr
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // course
            cursor.getLong(offset + 5) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HomeworkDetailsBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHomeworkTypeStr(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCourse(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HomeworkDetailsBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HomeworkDetailsBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HomeworkDetailsBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
