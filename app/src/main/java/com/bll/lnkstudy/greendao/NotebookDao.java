package com.bll.lnkstudy.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bll.lnkstudy.mvp.model.Notebook;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTEBOOK".
*/
public class NotebookDao extends AbstractDao<Notebook, Long> {

    public static final String TABLENAME = "NOTEBOOK";

    /**
     * Properties of entity Notebook.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Type = new Property(3, int.class, "type", false, "TYPE");
        public final static Property CreateDate = new Property(4, long.class, "createDate", false, "CREATE_DATE");
        public final static Property DateStr = new Property(5, String.class, "dateStr", false, "DATE_STR");
        public final static Property ContentResId = new Property(6, String.class, "contentResId", false, "CONTENT_RES_ID");
        public final static Property IsEncrypt = new Property(7, boolean.class, "isEncrypt", false, "IS_ENCRYPT");
        public final static Property Encrypt = new Property(8, String.class, "encrypt", false, "ENCRYPT");
    }


    public NotebookDao(DaoConfig config) {
        super(config);
    }
    
    public NotebookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTEBOOK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"TITLE\" TEXT," + // 2: title
                "\"TYPE\" INTEGER NOT NULL ," + // 3: type
                "\"CREATE_DATE\" INTEGER NOT NULL ," + // 4: createDate
                "\"DATE_STR\" TEXT," + // 5: dateStr
                "\"CONTENT_RES_ID\" TEXT," + // 6: contentResId
                "\"IS_ENCRYPT\" INTEGER NOT NULL ," + // 7: isEncrypt
                "\"ENCRYPT\" TEXT);"); // 8: encrypt
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTEBOOK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Notebook entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getCreateDate());
 
        String dateStr = entity.getDateStr();
        if (dateStr != null) {
            stmt.bindString(6, dateStr);
        }
 
        String contentResId = entity.getContentResId();
        if (contentResId != null) {
            stmt.bindString(7, contentResId);
        }
        stmt.bindLong(8, entity.getIsEncrypt() ? 1L: 0L);
 
        String encrypt = entity.getEncrypt();
        if (encrypt != null) {
            stmt.bindString(9, encrypt);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Notebook entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getCreateDate());
 
        String dateStr = entity.getDateStr();
        if (dateStr != null) {
            stmt.bindString(6, dateStr);
        }
 
        String contentResId = entity.getContentResId();
        if (contentResId != null) {
            stmt.bindString(7, contentResId);
        }
        stmt.bindLong(8, entity.getIsEncrypt() ? 1L: 0L);
 
        String encrypt = entity.getEncrypt();
        if (encrypt != null) {
            stmt.bindString(9, encrypt);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Notebook readEntity(Cursor cursor, int offset) {
        Notebook entity = new Notebook( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.getInt(offset + 3), // type
            cursor.getLong(offset + 4), // createDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dateStr
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // contentResId
            cursor.getShort(offset + 7) != 0, // isEncrypt
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // encrypt
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Notebook entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setCreateDate(cursor.getLong(offset + 4));
        entity.setDateStr(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContentResId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsEncrypt(cursor.getShort(offset + 7) != 0);
        entity.setEncrypt(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Notebook entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Notebook entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Notebook entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
