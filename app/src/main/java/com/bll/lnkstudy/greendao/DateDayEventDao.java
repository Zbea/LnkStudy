package com.bll.lnkstudy.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bll.lnkstudy.utils.greendao.DateRemindConverter;
import java.util.List;

import com.bll.lnkstudy.mvp.model.DateDayEvent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DATE_DAY_EVENT".
*/
public class DateDayEventDao extends AbstractDao<DateDayEvent, Long> {

    public static final String TABLENAME = "DATE_DAY_EVENT";

    /**
     * Properties of entity DateDayEvent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property DayLong = new Property(2, long.class, "dayLong", false, "DAY_LONG");
        public final static Property DayStr = new Property(3, String.class, "dayStr", false, "DAY_STR");
        public final static Property Explain = new Property(4, String.class, "explain", false, "EXPLAIN");
        public final static Property RemindList = new Property(5, String.class, "remindList", false, "REMIND_LIST");
        public final static Property Repeat = new Property(6, String.class, "repeat", false, "REPEAT");
    }

    private final DateRemindConverter remindListConverter = new DateRemindConverter();

    public DateDayEventDao(DaoConfig config) {
        super(config);
    }
    
    public DateDayEventDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DATE_DAY_EVENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"DAY_LONG\" INTEGER NOT NULL ," + // 2: dayLong
                "\"DAY_STR\" TEXT," + // 3: dayStr
                "\"EXPLAIN\" TEXT," + // 4: explain
                "\"REMIND_LIST\" TEXT," + // 5: remindList
                "\"REPEAT\" TEXT);"); // 6: repeat
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATE_DAY_EVENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DateDayEvent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
        stmt.bindLong(3, entity.getDayLong());
 
        String dayStr = entity.getDayStr();
        if (dayStr != null) {
            stmt.bindString(4, dayStr);
        }
 
        String explain = entity.getExplain();
        if (explain != null) {
            stmt.bindString(5, explain);
        }
 
        List remindList = entity.getRemindList();
        if (remindList != null) {
            stmt.bindString(6, remindListConverter.convertToDatabaseValue(remindList));
        }
 
        String repeat = entity.getRepeat();
        if (repeat != null) {
            stmt.bindString(7, repeat);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DateDayEvent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
        stmt.bindLong(3, entity.getDayLong());
 
        String dayStr = entity.getDayStr();
        if (dayStr != null) {
            stmt.bindString(4, dayStr);
        }
 
        String explain = entity.getExplain();
        if (explain != null) {
            stmt.bindString(5, explain);
        }
 
        List remindList = entity.getRemindList();
        if (remindList != null) {
            stmt.bindString(6, remindListConverter.convertToDatabaseValue(remindList));
        }
 
        String repeat = entity.getRepeat();
        if (repeat != null) {
            stmt.bindString(7, repeat);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DateDayEvent readEntity(Cursor cursor, int offset) {
        DateDayEvent entity = new DateDayEvent( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.getLong(offset + 2), // dayLong
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dayStr
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // explain
            cursor.isNull(offset + 5) ? null : remindListConverter.convertToEntityProperty(cursor.getString(offset + 5)), // remindList
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // repeat
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DateDayEvent entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDayLong(cursor.getLong(offset + 2));
        entity.setDayStr(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setExplain(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRemindList(cursor.isNull(offset + 5) ? null : remindListConverter.convertToEntityProperty(cursor.getString(offset + 5)));
        entity.setRepeat(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DateDayEvent entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DateDayEvent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DateDayEvent entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
