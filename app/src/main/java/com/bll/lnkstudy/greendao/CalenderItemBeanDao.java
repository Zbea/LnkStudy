package com.bll.lnkstudy.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bll.lnkstudy.mvp.model.CalenderItemBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CALENDER_ITEM_BEAN".
*/
public class CalenderItemBeanDao extends AbstractDao<CalenderItemBean, Long> {

    public static final String TABLENAME = "CALENDER_ITEM_BEAN";

    /**
     * Properties of entity CalenderItemBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property Pid = new Property(2, int.class, "pid", false, "PID");
        public final static Property ImageUrl = new Property(3, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property DownloadUrl = new Property(4, String.class, "downloadUrl", false, "DOWNLOAD_URL");
        public final static Property PreviewUrl = new Property(5, String.class, "previewUrl", false, "PREVIEW_URL");
        public final static Property Title = new Property(6, String.class, "title", false, "TITLE");
        public final static Property Introduction = new Property(7, String.class, "introduction", false, "INTRODUCTION");
        public final static Property BuyStatus = new Property(8, int.class, "buyStatus", false, "BUY_STATUS");
        public final static Property Time = new Property(9, long.class, "time", false, "TIME");
        public final static Property Price = new Property(10, int.class, "price", false, "PRICE");
        public final static Property Date = new Property(11, long.class, "date", false, "DATE");
        public final static Property Year = new Property(12, int.class, "year", false, "YEAR");
        public final static Property IsSet = new Property(13, boolean.class, "isSet", false, "IS_SET");
        public final static Property Path = new Property(14, String.class, "path", false, "PATH");
    }


    public CalenderItemBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CalenderItemBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CALENDER_ITEM_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"PID\" INTEGER NOT NULL ," + // 2: pid
                "\"IMAGE_URL\" TEXT," + // 3: imageUrl
                "\"DOWNLOAD_URL\" TEXT," + // 4: downloadUrl
                "\"PREVIEW_URL\" TEXT," + // 5: previewUrl
                "\"TITLE\" TEXT," + // 6: title
                "\"INTRODUCTION\" TEXT," + // 7: introduction
                "\"BUY_STATUS\" INTEGER NOT NULL ," + // 8: buyStatus
                "\"TIME\" INTEGER NOT NULL ," + // 9: time
                "\"PRICE\" INTEGER NOT NULL ," + // 10: price
                "\"DATE\" INTEGER NOT NULL ," + // 11: date
                "\"YEAR\" INTEGER NOT NULL ," + // 12: year
                "\"IS_SET\" INTEGER NOT NULL ," + // 13: isSet
                "\"PATH\" TEXT);"); // 14: path
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CALENDER_ITEM_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CalenderItemBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getPid());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(4, imageUrl);
        }
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(5, downloadUrl);
        }
 
        String previewUrl = entity.getPreviewUrl();
        if (previewUrl != null) {
            stmt.bindString(6, previewUrl);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        String introduction = entity.getIntroduction();
        if (introduction != null) {
            stmt.bindString(8, introduction);
        }
        stmt.bindLong(9, entity.getBuyStatus());
        stmt.bindLong(10, entity.getTime());
        stmt.bindLong(11, entity.getPrice());
        stmt.bindLong(12, entity.getDate());
        stmt.bindLong(13, entity.getYear());
        stmt.bindLong(14, entity.getIsSet() ? 1L: 0L);
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(15, path);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CalenderItemBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getPid());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(4, imageUrl);
        }
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(5, downloadUrl);
        }
 
        String previewUrl = entity.getPreviewUrl();
        if (previewUrl != null) {
            stmt.bindString(6, previewUrl);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        String introduction = entity.getIntroduction();
        if (introduction != null) {
            stmt.bindString(8, introduction);
        }
        stmt.bindLong(9, entity.getBuyStatus());
        stmt.bindLong(10, entity.getTime());
        stmt.bindLong(11, entity.getPrice());
        stmt.bindLong(12, entity.getDate());
        stmt.bindLong(13, entity.getYear());
        stmt.bindLong(14, entity.getIsSet() ? 1L: 0L);
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(15, path);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CalenderItemBean readEntity(Cursor cursor, int offset) {
        CalenderItemBean entity = new CalenderItemBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.getInt(offset + 2), // pid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // imageUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // downloadUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // previewUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // title
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // introduction
            cursor.getInt(offset + 8), // buyStatus
            cursor.getLong(offset + 9), // time
            cursor.getInt(offset + 10), // price
            cursor.getLong(offset + 11), // date
            cursor.getInt(offset + 12), // year
            cursor.getShort(offset + 13) != 0, // isSet
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // path
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CalenderItemBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setPid(cursor.getInt(offset + 2));
        entity.setImageUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDownloadUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPreviewUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIntroduction(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBuyStatus(cursor.getInt(offset + 8));
        entity.setTime(cursor.getLong(offset + 9));
        entity.setPrice(cursor.getInt(offset + 10));
        entity.setDate(cursor.getLong(offset + 11));
        entity.setYear(cursor.getInt(offset + 12));
        entity.setIsSet(cursor.getShort(offset + 13) != 0);
        entity.setPath(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CalenderItemBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CalenderItemBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CalenderItemBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
