package com.bll.lnkstudy.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bll.lnkstudy.mvp.model.DataUpdateBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DATA_UPDATE_BEAN".
*/
public class DataUpdateBeanDao extends AbstractDao<DataUpdateBean, Long> {

    public static final String TABLENAME = "DATA_UPDATE_BEAN";

    /**
     * Properties of entity DataUpdateBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property Uid = new Property(2, int.class, "uid", false, "UID");
        public final static Property Type = new Property(3, int.class, "type", false, "TYPE");
        public final static Property ContentType = new Property(4, int.class, "contentType", false, "CONTENT_TYPE");
        public final static Property ListJson = new Property(5, String.class, "listJson", false, "LIST_JSON");
        public final static Property Date = new Property(6, long.class, "date", false, "DATE");
        public final static Property DownloadUrl = new Property(7, String.class, "downloadUrl", false, "DOWNLOAD_URL");
        public final static Property SourceUrl = new Property(8, String.class, "sourceUrl", false, "SOURCE_URL");
        public final static Property Path = new Property(9, String.class, "path", false, "PATH");
        public final static Property IsDelete = new Property(10, boolean.class, "isDelete", false, "IS_DELETE");
    }


    public DataUpdateBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DataUpdateBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DATA_UPDATE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"UID\" INTEGER NOT NULL ," + // 2: uid
                "\"TYPE\" INTEGER NOT NULL ," + // 3: type
                "\"CONTENT_TYPE\" INTEGER NOT NULL ," + // 4: contentType
                "\"LIST_JSON\" TEXT," + // 5: listJson
                "\"DATE\" INTEGER NOT NULL ," + // 6: date
                "\"DOWNLOAD_URL\" TEXT," + // 7: downloadUrl
                "\"SOURCE_URL\" TEXT," + // 8: sourceUrl
                "\"PATH\" TEXT," + // 9: path
                "\"IS_DELETE\" INTEGER NOT NULL );"); // 10: isDelete
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATA_UPDATE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DataUpdateBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getUid());
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getContentType());
 
        String listJson = entity.getListJson();
        if (listJson != null) {
            stmt.bindString(6, listJson);
        }
        stmt.bindLong(7, entity.getDate());
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(8, downloadUrl);
        }
 
        String sourceUrl = entity.getSourceUrl();
        if (sourceUrl != null) {
            stmt.bindString(9, sourceUrl);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(10, path);
        }
        stmt.bindLong(11, entity.getIsDelete() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DataUpdateBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getUid());
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getContentType());
 
        String listJson = entity.getListJson();
        if (listJson != null) {
            stmt.bindString(6, listJson);
        }
        stmt.bindLong(7, entity.getDate());
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(8, downloadUrl);
        }
 
        String sourceUrl = entity.getSourceUrl();
        if (sourceUrl != null) {
            stmt.bindString(9, sourceUrl);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(10, path);
        }
        stmt.bindLong(11, entity.getIsDelete() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DataUpdateBean readEntity(Cursor cursor, int offset) {
        DataUpdateBean entity = new DataUpdateBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.getInt(offset + 2), // uid
            cursor.getInt(offset + 3), // type
            cursor.getInt(offset + 4), // contentType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // listJson
            cursor.getLong(offset + 6), // date
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // downloadUrl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sourceUrl
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // path
            cursor.getShort(offset + 10) != 0 // isDelete
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DataUpdateBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setUid(cursor.getInt(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setContentType(cursor.getInt(offset + 4));
        entity.setListJson(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDate(cursor.getLong(offset + 6));
        entity.setDownloadUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSourceUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPath(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsDelete(cursor.getShort(offset + 10) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DataUpdateBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DataUpdateBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DataUpdateBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
